setBool("Auto Reconnect",false)
setBool("Show Place Hand",false)
setBool("Show Punch Hand",false)

for i, bot in pairs(getBots()) do
    if getBot().name:upper() == bot.name:upper() then
        indexbot = i
    end
end

tilebreak = {}
infoid = {}
worlds = {}
backups = {}
factorys = {}
sjam = {}
index = 1
strings = ""
local tileBlock = 0
local tileSeed = 0
local tilePack = 0
local tileEvent = 0
local tileRetrieve = 0
local tileFactory = 0
local identity = {}
local tileY = 0
identity.block = 1
identity.seed = 1
identity.pack = 1
identity.drop = 1
identity.event = 1
identity.takeseed = 1
identity.goodtime = os.time()
identity.indexBackup = 1
identity.gaiax = 0
identity.gaiay = 0
identity.utx = 0
identity.uty = 0
seedX = dropseedX - 1
seedY = dropseedY - 1
packX = droppackX - 1
packY = droppackY - 1
barisX = posbarisX - 1
barisY = posbarisY - 1
blockX = dropblockX - 1
blockY = dropblockY - 1
eventX = dropeventX - 1
eventY = dropeventY - 1
grindX = dropgrindX - 1
grindY = dropgrindY - 1
posX = customposX - 1
posY = customposY - 1
seed = block + 1

identity.splitt = function(str, ptr)
    if not ptr then 
        ptr = "%s"
    end
    local tbl = {}
    for string in string.gmatch(str, ptr) do
        table.insert(tbl, string) 
    end
    return tbl
end

for i =  1,worldperbot do
    table.insert(worlds,farmList[math.floor((indexbot - 1) * worldperbot + i)])
end

for i = 1, worldperbotbackfactory do
    table.insert(factorys,worldtotakebackfactory[math.floor((indexbot - 1) * worldperbotbackfactory + i)])
end

for i = 1,worldperbotjammer do
    table.insert(sjam,worldtotakeback[math.floor((indexbot - 1) * worldperbotjammer + i)])
end

for i = 1,backupPerbot do
    table.insert(backups,backupList[math.floor((indexbot - 1) * backupPerbot + i)])
end

for x = math.floor(pnbtile/2),1,-1 do
    x = x * -1
    table.insert(tilebreak,x)
end

for x = 0, math.ceil(pnbtile/2) - 1 do
    table.insert(tilebreak,x)
end

if tileY == 0 then
    if typescript == "pnb" or typescript == "sellgems" then
        if pnbmode == "up" then
            tileY = -2
        elseif pnbmode == "down" then
            tileY = 2
        end
    elseif typescript == "rotation" or typescript == "pabrik" then
        tileY = - 1
    end
end

identity.genworld = function(threads)
    local alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    local withnum = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    local generate = ""
    for i = 1,letter do
        local random = math.random(1,#alphabet)
        local randomnumber = math.random(1,#withnum)
        local acakalpa = string.sub(alphabet,random,random)
        local acaknomor = string.sub(withnum,randomnumber,randomnumber)
        if withnumber then
            generate = generate..acaknomor
        else
            generate = generate..acakalpa
        end
    end
    return generate
end
local find = identity.genworld(threads)

identity.punchitem = function(x,y)
    for _,tilepunch in pairs(tilebreak) do
        if getTile(x + tilepunch,y + tileY).fg ~= 0 or getTile(x + tilepunch,y + tileY).bg ~= 0 then
            return true
        end
    end
    return false
end

identity.placeitem = function(x,y)
    for _,tileplace in pairs(tilebreak) do
        if getTile(x + tileplace,y + tileY).fg == 0 and getTile(x+tileplace,y + tileY).bg == 0 then
            return true
        end
    end
    return false
end

identity.itemFloat = function(id)
	count = 0
	for _, obj in pairs(getObjects()) do
		if obj.id == id then
			count = count + obj.count
		end
	end
	return count
end

identity.writeFile = function(info,text)
    local file = io.open(""..info..".txt","a")
    file:write(text.."\n")
    file:close()
end

identity.backupacc = function(threads)
    ::BACK::
    for i = identity.indexBackup, #backups do
        thread = identity.splitt(backups[i],"([^"..symbol.."]+)")[1]
        threading = identity.splitt(backups[i],"([^"..symbol.."]+)")[2]
        num = identity.splitt(backups[i],"([^"..symbol.."]+)")[3] or ""
        if proxy then
            if typeaccount == "guest" then
                if macposition == "left" then
                    addBot(find,true,num)
                    sleep(1000)
                    setMac(thread)
                    setRid(threading)
                    connect()
                elseif macposition == "right" then
                    addBot(find,true,num)
                    sleep(1000)
                    setMac(threading)
                    setRid(thread)
                    connect()
                end
            elseif typeaccount == "normal" then
                addBot(thread,threading,num)
                sleep(delayloginbot)
            end
        else
            if typeaccount == "guest" then
                if macposition == "left" then
                    addBot(find)
                    sleep(1000)
                    setMac(thread)
                    setRid(threading)
                    connect()
                elseif macposition == "right" then
                    addBot(find)
                    sleep(1000)
                    setMac(threading)
                    setRid(thread)
                    connect()
                end
            elseif typeaccount == "normal" then
                addBot(thread,threading)
                sleep(delayloginbot)
            end
        end
        sleep(delayloginbot)
        identity.botinfo("Changing bot to : [ ||"..getBot().name.."|| ]")
        setBool("Auto Reconnect",false)
        if typeaccount == "normal" then
            while getBot().status ~= "online" do
                connect()
                sleep(delayreconnect)
                if getBot().status == "suspended" or getBot().status == "banned" or getBot().status == "aap detected" or getBot().status == "temporary ban" then
                    identity.botinfo("Failed switch bot to : [ ||"..getBot().name.."|| ] status is "..getBot().status..", Removing bots @everyone")
                    identity.writeFile("botbackupstatus","[ "..getBot().name.." ] status is "..getBot().status.."")
                    removeBot(getBot().name)
                    sleep(2000)
                    identity.indexBackup = identity.indexBackup + 1
                    if identity.indexBackup > #backups then
                        print("No more bots to switch, sc terminated")
                        identity.botinfo("No more bots to switch, sc terminated @everyone")
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                    sleep(2000)
                    goto BACK
                end
            end
            if getBot().status:find("online") and getBot().level < maxlevel then
                if proxy then
                    identity.botinfo("Success switch bot to : [ ||"..getBot().name.."|| ], proxy : "..getBot().proxy.."")
                else
                    identity.botinfo("Success switch bot to : [ ||"..getBot().name.."|| ]")
                end
                break
            elseif getBot().status:find("online") and getBot().level >= maxlevel then
                if proxy then
                    identity.botinfo("Failed switch bot to : [ ||"..getBot().name.."|| ], proxy : "..getBot().proxy..", this bot has reached max level, rechecking ur backup bot list")
                else
                    identity.botinfo("Failed switch bot to : [ ||"..getBot().name.."|| ], this bot has reached max level, rechecking ur backup bot list")
                end
                removeBot(getBot().name)
                sleep(2000)
                identity.indexBackup = identity.indexBackup + 1
                if identity.indexBackup > #backups then
                    print("No more bots to switch, sc terminated")
                    identity.botinfo("No more bots to switch, sc terminated @everyone")
                    if removingbot then
                        removeBot(getBot().name)
                        sleep(2000)
                    end
                    error()
                end
            end
        elseif typeaccount == "guest" then
            while getBot().status ~= "online" do
                connect()
                sleep(delayreconnect)
                if getBot().status == "suspended" or getBot().status == "banned" or getBot().status == "got captcha" or getBot().status == "temporary ban" then
                    identity.botinfo("Bot backup : [ ||"..getBot().name.."|| ] status is "..getBot().status..", Terminated script @everyone")
                    identity.writeFile("botbackupstatus","[ "..getMac()..""..symbol..""..getRid().." ] status is "..getBot().status.."")
                    removeBot(getBot().name)
                    sleep(2000)
                    identity.indexBackup = identity.indexBackup + 1
                    if identity.indexBackup > #backups then
                        print("No more bots to switch, sc terminated")
                        identity.botinfo("No more bots to switch, sc terminated @everyone")
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                    goto BACK
                end
            end
            if getBot().status:find("online") and getBot().level < maxlevel then
                if proxy then
                    identity.botinfo("Success add bot to : [ "..getMac()..""..symbol..""..getRid().." ], proxy : "..getBot().proxy.."")
                else
                    identity.botinfo("Success add bot to : [ "..getMac()..""..symbol..""..getRid().." ]")
                end
                break
            elseif getBot().status:find("online") and getBot().level >= maxlevel then
                if proxy then
                    identity.botinfo("Failed switch bot to : [ "..getMac()..""..symbol..""..getRid().." ], proxy : "..getBot().proxy..", this bot has reached max level, rechecking ur backup bot list")
                else
                    identity.botinfo("Failed switch bot to : [ "..getMac()..""..symbol..""..getRid().." ], this bot has reached max level, rechecking ur backup bot list")
                end
                removeBot(getBot().name)
                sleep(2000)
                identity.indexBackup = identity.indexBackup + 1
                if identity.indexBackup > #backups then
                    print("No more bots to switch, sc terminated")
                    identity.botinfo("No more bots to switch, sc terminated @everyone")
                    if removingbot then
                        removeBot(getBot().name)
                        sleep(2000)
                    end
                    error()
                end
            end
        end
    end
end

identity.botstatus = function()
    strings = ""
    for _, bot in pairs(getBots()) do
        if short then
            strings = strings.."\n"..""..(string.sub(bot.name,1,3)).." | ||"..(string.sub(bot.world,1,3)).."|| | "..(string.upper(bot.status,1,2)).."" 
        else
            strings = strings.."\n"..""..(string.upper(bot.name)).." | ||"..(string.upper(bot.world)).."|| | "..(string.upper(bot.status)).."" 
        end
    end
    return strings
end

identity.hookblock = function()
    strings = ""
	for i = 1, #storageblock do
        if short then
            strings = strings.."\n[ ||"..(string.sub(storageblock[i],1,3)).."|| ] "..(infoid[storageblock[i]] or "?")..""
        else
            strings = strings.."\n[ ||"..string.upper(storageblock[i]).."|| ] "..(infoid[storageblock[i]] or "?")..""
        end
    end
    return strings
end

identity.hookprofit = function()
    strings = ""
    if short then
        strings = strings.."\n[ ||"..(string.sub(worldtogrind,1,3)).."|| ] "..(infoid[worldtogrind] or "?")..""
    else
        strings = strings.."\n[ ||"..string.upper(worldtogrind).."|| ] "..(infoid[worldtogrind] or "?")..""
    end
    return strings
end

identity.hookseed = function()
    strings = ""
	for i = 1, #storageseed do
        if short then
            strings = strings.."\n[ ||"..(string.sub(storageseed[i],1,3)).."|| ] "..(infoid[storageseed[i]] or "?")..""
        else
            strings = strings.."\n[ ||"..string.upper(storageseed[i]).."|| ] "..(infoid[storageseed[i]] or "?")..""
        end
    end
    return strings
end

identity.hookpack = function()
    strings = ""
	for i = 1, #storagepack do
        if short then
            strings = strings.."\n[ ||"..(string.sub(storagepack[i],1,3)).."|| ] "..(infoid[storagepack[i]] or "?")..""
        else
            strings = strings.."\n[ ||"..string.upper(storagepack[i]).."|| ] "..(infoid[storagepack[i]] or "?")..""
        end
    end
    return strings
end

identity.hookevent = function()
    strings = ""
	for i = 1, #storageblock do
        if short then
            strings = strings.."\n[ ||"..(string.sub(storageevent[i],1,3)).."|| ] "..(infoid[storageevent[i]] or "?")..""
        else
            strings = strings.."\n[ ||"..string.upper(storageevent[i]).."|| ] "..(infoid[storageevent[i]] or "?")..""
        end
    end
    return strings
end

identity.botgems = function()
    local count = 0
    for _,bot in pairs(getBots()) do
        count = count + bot.gems
    end
    return count
end

identity.botinfo = function(content)
	if webhookstatus then
		text = [[
			$webHookUrl = "]]..webhookstatuslink..[["
			$payload = @{
				content = "]]..content..[["
			}
			[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
			Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Post -ContentType "application/json"
		]]
		local file = io.popen("powershell -command -", "w")
		file:write(text)
		file:close()
	end
end

identity.goodtimes = function(estimates)
    local seconds = tonumber(estimates)
    if seconds <= 0 then
        return "00:00:00";
    else
        hours = string.format("%02.f", math.floor(estimates/3600));
        minutes = string.format("%02.f", math.floor(estimates/60 - (hours*60)));
        seconds = string.format("%02.f", math.floor(estimates - hours*3600 - minutes *60));
        return ""..hours.." : "..minutes.." : "..seconds
    end
end

identity.checkaccount = function(threads)
    identity.botinfo("[ ||"..getBot().name.."|| ] has reached level limit, changing bot if bot switch are enable")
    if findItem(block) > 0 then
        identity.storingblocks(threads)
    end
    if findItem(seed) > 0 then
        identity.storingseeds(threads)
    end
    if backuplevel then
        removeBot(getBot().name)
        sleep(2000)
        identity.backupacc(threads)
    else
        if pnbotherworld then
            identity.warp(find,"")
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                move(1,0)
                sleep(500)
            end
            ::BACK::
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32) - 1).fg == 226 do
                punch(0,-1)
                sleep(delaypunch)
                identity.reconnect(find,"")
            end
            if findItem(226) > 0 then
                identity.storingjammer()
            else
                goto BACK
            end
        end
        identity.warp(find,"")          
        if removingbot then
            removeBot(getBot().name)
            sleep(2000)
        end
        error()
    end
end

identity.webhookinfo = function()
	if infostorage then
        if typescript == "ht" or typescript == "pnb" or typescript == "rotation" then
            local text = [[
                $webHookUrl = "]]..linkinfostorage..[[/messages/]]..messageidinfostorage..[["
                $payload = @{
                    username = "BizzantiuM's"
                    embeds = @(
                        @{
                            title = "AUTO MULTITASKING v1.1 [ ]]..string.upper(typescript)..[[ ]"
                            color = "]]..math.random(111111,999999)..[["
                            fields = @(
                                @{
                                    name = ""
                                    value = "]].."RUNNING : [ "..identity.goodtimes(os.difftime(os.time(),identity.goodtime)).." ]"..[["
                                    inline = "false"
                                }
                                @{
                                    name = "BOT INFO"
                                    value = "]]..identity.botstatus()..[["
                                    inline = "false"
                                }
                                @{
                                    name = "STORAGE STATIC"
                                    value = "]]..""..[["
                                    inline = "false"
                                }
                                @{
                                    name = "BLOCK"
                                    value = "]]..identity.hookblock()..[["
                                    inline = "false"
                                }
                                @{
                                    name = "SEED"
                                    value = "]]..identity.hookseed()..[["
                                    inline = "true"
                                }
                                @{
                                    name = "PACK"
                                    value = "]]..identity.hookpack()..[["
                                    inline = "true"
                                }
                                @{
                                    name = "EVENT"
                                    value = "]]..identity.hookevent()..[["
                                    inline = "true"
                                }
                            )
                            footer = @{
                                text = "[Hydrotrium] Developed by BizzantiuM's`nLast updated : ]]..(os.date"%d/%m/%y":upper().." at ")..os.date("%I")..":"..os.date("%M").." "..os.date("%p"):upper()..[["
                            }
                        }
                    )
                }
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
            ]]
            local pipe = io.popen("powershell -command -", "w")
            pipe:write(text)
            pipe:close()
        elseif typescript == "pt" then
            local text = [[
                $webHookUrl = "]]..linkinfostorage..[[/messages/]]..messageidinfostorage..[["
                $payload = @{
                    username = "BizzantiuM's"
                    embeds = @(
                        @{
                            title = "AUTO MULTITASKING v1.1 [ ]]..string.upper(typescript)..[[ ]"
                            color = "]]..math.random(111111,999999)..[["
                            fields = @(
                                @{
                                    name = ""
                                    value = "]].."RUNNING : [ "..identity.goodtimes(os.difftime(os.time(),identity.goodtime)).." ]"..[["
                                    inline = "false"
                                }
                                @{
                                    name = "BOT INFO"
                                    value = "]]..identity.botstatus()..[["
                                    inline = "false"
                                }
                                @{
                                    name = "STORAGE STATIC"
                                    value = "]]..""..[["
                                    inline = "false"
                                }
                                @{
                                    name = "SEED"
                                    value = "]]..identity.hookseed()..[["
                                    inline = "true"
                                }
                            )
                            footer = @{
                                text = "[Hydrotrium] Developed by BizzantiuM's`nLast updated : ]]..(os.date"%d/%m/%y":upper().." at ")..os.date("%I")..":"..os.date("%M").." "..os.date("%p"):upper()..[["
                            }
                        }
                    )
                }
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
            ]]
            local pipe = io.popen("powershell -command -", "w")
            pipe:write(text)
            pipe:close()
        elseif typescript == "pabrik" then
            local text = [[
                $webHookUrl = "]]..linkinfostorage..[[/messages/]]..messageidinfostorage..[["
                $payload = @{
                    username = "BizzantiuM's"
                    embeds = @(
                        @{
                            title = "AUTO MULTITASKING v1.1 [ ]]..string.upper(typescript)..[[ ]"
                            color = "]]..math.random(111111,999999)..[["
                            fields = @(
                                @{
                                    name = ""
                                    value = "]].."RUNNING : [ "..identity.goodtimes(os.difftime(os.time(),identity.goodtime)).." ]"..[["
                                    inline = "false"
                                }
                                @{
                                    name = "BOT INFO"
                                    value = "]]..identity.botstatus()..[["
                                    inline = "false"
                                }
                                @{
                                    name = "PROFIT"
                                    value = "]]..identity.hookprofit()..[["
                                    inline = "false"
                                }
                            )
                            footer = @{
                                text = "[Hydrotrium] Developed by BizzantiuM's`nLast updated : ]]..(os.date"%d/%m/%y":upper().." at ")..os.date("%I")..":"..os.date("%M").." "..os.date("%p"):upper()..[["
                            }
                        }
                    )
                }
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
            ]]
            local pipe = io.popen("powershell -command -", "w")
            pipe:write(text)
            pipe:close()
        end
    end
end

identity.reconnect = function(world,id,x,y)
    if getBot().world == "EXIT" and getBot().status == "online" then 
        identity.botinfo("[ ||"..getBot().name.."|| ] at EXIT, trying to joining world again @everyone")
        local count = 0
        while getBot().world ~= world:upper() do
            sendPacket("action|join_request\nname|"..world:upper().."\ninvitedWorld|0",3)
            sleep(delaywarp)
            if getBot().world ~= world:upper() then 
                count = count + 1
                if count > 5 then
                    identity.botinfo("[ ||"..getBot().name.."|| ] Failed to joining world again, terminated script @everyone")
                    error()
                end
            end
        end
        if id ~= "" then
            local stucks = 0
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
                sleep(delaywarp)
                if stucks > 3 then
                    identity.botinfo("[ ||"..getBot().name.."|| ] Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                    error()
                end
            end
        end
        if x and y then
            while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                findPath(x,y)
                sleep(150)
            end
        end
        identity.botinfo("[ ||"..getBot().name.."|| ] success to joining world @everyone")
    end
    if getBot().status ~= "online" then
        identity.botinfo("[ ||"..getBot().name.."|| ] status is "..getBot().status.." @everyone")
        while getBot().status ~= "online" do
            connect()
            sleep(delayreconnect)
            if getBot().status == "suspended" or getBot().status == "banned" or getBot().status == "maintenance" then
                identity.botinfo("[ ||"..getBot().name.."|| ] status is "..getBot().status..", removing bot @everyone")
                if backupwhensuspend then
                    removeBot(getBot().name)
                    sleep(2000)
                    identity.botinfo("Backup are enable, changing bot [ ||"..getBot().name.."|| ]")
                    identity.backupacc()
                else
                    if removingbot then
                        removeBot(getBot().name)
                        sleep(2000)
                    end
                    error()
                end
            end
        end
        local counts = 0
        while getBot().world ~= world:upper() do
            sendPacket("action|join_request\nname|"..world:upper().."\ninvitedWorld|0",3)
            sleep(delaywarp)
            if getBot().world ~= world:upper() then 
                counts = counts + 1
                if counts > 5 then
                    identity.botinfo("[ ||"..getBot().name.."|| ] Failed to joining world again, terminated script @everyone")
                    error()
                end
            end
        end
        if id ~= "" then
            local stuckk = 0
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
                sleep(delaywarp)
                if stuckk > 3 then
                    identity.botinfo("[ ||"..getBot().name.."|| ] Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                    error()
                end
            end
        end
        if x and y then
            while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                findPath(x,y)
                sleep(150)
            end
        end
        identity.botinfo("[ ||"..getBot().name.."|| ] status is "..getBot().status.." @everyone")
    end
    if getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 then
        identity.botinfo("[ ||"..getBot().name.."|| ] Stuck at white door ! @everyone")
        local stuck = 0
        if id ~= "" then
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
                sleep(delaywarp)
                if stuck > 3 then
                    identity.botinfo("[ ||"..getBot().name.."|| ] Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                end
            end
        end
        if x and y then
            while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                findPath(x,y)
                sleep(150)
            end
        end
        identity.botinfo("[ ||"..getBot().name.."|| ] Already back to pos ! @everyone")
    end
end

identity.warp = function(world,door)
    name = world
    if door ~= "" then
        name = name .. "|" ..door
    end
    if getBot().world ~= string.upper(world) then
        addHook("onvariant","nuked",function (varlist)
            if varlist[0] == "OnConsoleMessage" then
                if string.find(varlist[1],"inaccessible.") then
                    nuked = true
                end
                if string.find(varlist[1], "please try again later.") then
                    subserver = true
                end
                if string.find(varlist[1], "people in it.") then
                    people = true
                end
                if string.find(varlist[1], "Players lower than level") then
                    level = true
                end
            end
        end)
        while getBot().world ~= string.upper(world) and not nuked and not subserver and not people and not level do
            while getBot().status ~= "online" do
                connect()
                sleep(delayreconnect)
                if getBot().status == "suspended" or getBot().status == "banned" or getBot().status == "maintenance" then
                    if backupwhensuspend then
                        removeBot(getBot().name)
                        sleep(2000)
                        identity.botinfo("Backup are enable, changing bot [ ||"..getBot().name.."|| ]")
                        identity.backupacc()
                    else
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                end
            end
            sendPacket("action|join_request\nname|"..name.."\ninvitedWorld|0",3)
            sleep(delaywarp)
        end
        removeHooks()
        sleep(2000)
    end
    if getBot().world == string.upper(world) then
        if door ~= "" then
            local stuck = 0
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 and not wrong do
                while getBot().status ~= "online" do
                    connect()
                    sleep(delayreconnect)
                    if getBot().status == "suspended" or getBot().status == "banned" or getBot().status == "maintenance" then
                        if backupwhensuspend then
                            removeBot(getBot().name)
                            sleep(2000)
                            identity.botinfo("Backup are enable, changing bot [ ||"..getBot().name.."|| ]")
                            identity.backupacc()
                        else
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                    end
                end
                sendPacket("action|join_request\nname|"..name.."\ninvitedWorld|0",3)
                sleep(delaywarp)
                stuck = stuck + 1
                if stuck == 5 then
                    wrong = true
                end
            end
        end
    end
end

identity.takepickaxe = function(threads)
    ::BACK::
    world = identity.splitt(worldpickaxe[index],"[^:]+")[1]
    door = identity.splitt(worldpickaxe[index],"[^:]+")[2]
    setJob("Take pickaxe")
    identity.warp(world,door)
    if not people then
        if not level then
            if not subserver then
                if not nuked then
                    if not wrong then
                        if findItem(98) == 0 then
                            for _, obj in pairs(getObjects()) do
                                if obj.id == 98 then
                                    findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                                    sleep(1000)
                                    collect(2)
                                    sleep(1000)
                                    identity.reconnect(world,door,math.floor(obj.x / 32),math.floor(obj.y / 32))
                                end
                                if findItem(98) > 0  then
                                    wear(98)
                                    sleep(500)
                                    move(-1,0)
                                    sleep(1000)
                                    drop(98,findItem(98) - 1)
                                    sleep(1000)
                                    break
                                end
                            end
                        end
                    else
                        wrong = false
                        sleep(5000)
                        print("Id door world take support items is wrong, check ur id door !!")
                        identity.botinfo("Id door world take support items is wrong, check ur id door !, terminated script @everyone")
                        error()
                    end
                else
                    nuked = false
                    sleep(5000)
                    print("World take support items is nuked, check ur world !!")
                    identity.botinfo("World take support items is nuked, check ur world !, terminated script @everyone")
                    error()
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto BACK
            end
        else
            level = false
            sleep(5000)
            print("World : "..world.." has level limit, change ur level world limit")
            identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
            error()
        end
    else
        people = false
        sleep(5000)
        print("World : "..world.." has full people, sleeping for 2 minutes")
        identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
        sleep(120000)
        goto BACK
    end
end

identity.buying = function()
    setJob("Buying packs")
    if findItem(112) >= mingems then
        if upbackpack then
            while getBot().slots < 36 do
                sendPacket("action|buy\nitem|upgrade_backpack",2)
                sleep(4000)
            end
        end
        while findItem(112) >= mingems do
            sendPacket("action|buy\nitem|"..debug,2)
            sleep(4000)
            if findItem(packList[1]) >= 200 then
                break
            end
        end
    end
end

identity.joinworld = function()
    for _, world in pairs(worldclearhistory) do
        ::BACK::
        setJob("Clearing history")
        identity.warp(world,"")
        move(1,0)
        sleep(250)
        identity.reconnect(world,"")
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                    else
                        nuked = false
                        sleep(5000)
                        print("World clearing history has nuked!!, change ur world history list")
                        identity.botinfo("World clearing history has nuked!!, change ur world history list. SC Terminated @everyone")
                        error()
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto BACK
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur world history list")
                identity.botinfo("World : "..world.." has level limit, change ur world history list. SC Terminated @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto BACK
        end
    end
end

identity.breakjammers = function()
    for _, idx in pairs(sjam) do
        setJob("Take back jammer")
        identity.warp(idx,"")
        while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
            move(1,0)
            sleep(500)
        end
        identity.reconnect(idx,"")
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32) - 1).fg == 226 do
                            punch(0,-1)
                            sleep(delaypunch)
                        end
                    else
                        nuked = false
                        sleep(5000)
                        print("World take back jammer has nuked!!")
                        identity.botinfo("World take back jammer has nuked!! SC Terminated @everyone")
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                end
            else
                level = false
                sleep(5000)
                print("World : "..idx.." take back jammer has level limit")
                identity.botinfo("World : "..idx.." take back jammer has level limit. SC Terminated @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..idx.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..idx.." has full people, sleeping for 2 minutes")
            sleep(120000)
        end
    end
end

identity.storingevents = function(threads)
    for i = identity.event , #storageevent do
        ::Here::
        setJob("Dropping events")
        world = storageevent[i]
        identity.warp(world,doorstorageevent)
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            if identity.itemFloat(itemevent[1]) >= limitevent then
                                infoid[world] = "["..identity.itemFloat(itemevent[1]).."] LIMIT !!!"
                                identity.botinfo("Events storage : [ ||"..world.."|| ] has reached limit, skipped world @everyone")
                                print("Events storage : [ "..world.." ] has reached limit, skipped world")
                                identity.event = identity.event + 1
                                if identity.event > #storageevent then
                                    infoid[world] = "["..identity.itemFloat(itemevent[1]).."] LIMIT !!!"
                                    identity.botinfo("All events storage has reached limit, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                    print("All events storage has reached limit, Removing bot : [ "..getBot().name.." ]")
                                    if removingbot then
                                        removeBot(getBot().name)
                                        sleep(2000)
                                    end
                                    error()
                                end
                                tileEvent = 0
                            else
                                for y,pack in pairs(itemevent) do
                                    for i,tile in pairs(getTiles()) do
                                        if separated then
                                            if tile.fg == 0 or tile.bg == 0 then
                                                ::BACK::
                                                findPath(eventX + (tileEvent),eventY - (y - 1))
                                                sleep(1000)
                                                local count = 0
                                                identity.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY - (y - 1))
                                                if eventX + (tileEvent) >= 98 then
                                                    eventY = eventY - 1
                                                    tileEvent = 0
                                                end
                                                while findItem(pack) > 0 do
                                                    drop(pack)
                                                    sleep(delaydrop)
                                                    identity.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY - (y - 1))
                                                    count = count + 1
                                                    if count >= 2 then
                                                        tileEvent = tileEvent + 1
                                                        goto BACK
                                                    end
                                                end
                                            end
                                            if findItem(pack) == 0 then
                                                break
                                            end
                                        else
                                            if tile.fg == 0 or tile.bg == 0 then
                                                ::BACK::
                                                findPath(eventX + (tileEvent),eventY)
                                                sleep(1000)
                                                local count = 0
                                                identity.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY)
                                                if eventX + (tileEvent) >= 98 then
                                                    eventY = eventY - 1
                                                    tileEvent = 0
                                                end
                                                while findItem(pack) > 0 do
                                                    drop(pack)
                                                    sleep(delaydrop)
                                                    identity.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY)
                                                    count = count + 1
                                                    if count >= 2 then
                                                        tileEvent = tileEvent + 1
                                                        goto BACK
                                                    end
                                                end
                                            end
                                            if findItem(pack) == 0 then
                                                break
                                            end
                                        end
                                    end
                                end
                                sleep(100)
                                break
                            end
                        else
                            infoid[world] = "WRONG DOOR !!!"
                            wrong = false
                            sleep(5000)
                            print("[ "..world.." ] Id door events storage is wrong, check ur id door!")
                            identity.botinfo("[ ||"..world.."|| ] Id door events storage is wrong, check ur id door! @everyone")
                            identity.event = identity.event + 1
                            if identity.event > #storageevent then
                                print("All events storage has reached limit")
                                identity.botinfo("All events storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                if removingbot then
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            end
                            tileEvent = 0
                        end
                    else
                        infoid[world] = "NUKED !!!"
                        nuked = false
                        sleep(5000)
                        print("[ "..world.." ] event Storage is NUKED, check ur storage!")
                        identity.botinfo("[ "..world.." ] event Storage is NUKED, check ur storage! @everyone")
                        identity.event = identity.event + 1
                        if identity.event > #storageevent then
                            print("All events storage has reached limit!")
                            identity.botinfo("All events storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tileEvent = 0
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto Here
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur level world limit")
                identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..identity.itemFloat(itemevent[1]).."]"
    if clearhistory then
        identity.joinworld()
    end
end

identity.storingpacks = function(threads)
    for i = identity.pack , #storagepack do
        ::Here::
        setJob("Dropping packs")
        world = storagepack[i]
        identity.warp(world,doorstoragepack)
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            if identity.itemFloat(packList[1]) >= limitpack then
                                infoid[world] = "["..identity.itemFloat(packList[1]).."] LIMIT !!!"
                                identity.botinfo("Packs storage : [ ||"..world.."|| ] has reached limit, skipped world @everyone")
                                print("Packs storage : [ "..world.." ] has reached limit, skipped world")
                                identity.pack = identity.pack + 1
                                if identity.pack > #storagepack then
                                    infoid[world] = "["..identity.itemFloat(packList[1]).."] LIMIT !!!"
                                    identity.botinfo("All packs storage has reached limit, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                    print("All packs storage has reached limit, Removing bot : [ "..getBot().name.." ]")
                                    if removingbot then
                                        removeBot(getBot().name)
                                        sleep(2000)
                                    end
                                    error()
                                end
                                tilePack = 0
                            else
                                for y,pack in pairs(packList) do
                                    for i,tile in pairs(getTiles()) do
                                        if separated then
                                            if tile.fg == 0 or tile.bg == 0 then
                                                ::BACK::
                                                findPath(packX + (tilePack),packY - (y-1))
                                                sleep(1000)
                                                local count = 0
                                                identity.reconnect(world,doorstoragepack,packX + (tilePack),packY - (y-1))
                                                if packX + (tilePack) >= 98 then
                                                    packY = packY - 1
                                                    tilePack = 0
                                                end
                                                while findItem(pack) > 0 do
                                                    drop(pack)
                                                    sleep(delaydrop)
                                                    identity.reconnect(world,doorstoragepack,packX + (tilePack),packY - (y-1))
                                                    count = count + 1
                                                    if count >= 2 then
                                                        tilePack = tilePack + 1
                                                        goto BACK
                                                    end
                                                end
                                            end
                                            if findItem(pack) == 0 then
                                                break
                                            end
                                        else
                                            if tile.fg == 0 or tile.bg == 0 then
                                                ::BACK::
                                                findPath(packX + (tilePack),packY)
                                                sleep(1000)
                                                local count = 0
                                                identity.reconnect(world,doorstoragepack,packX + (tilePack),packY)
                                                if packX + (tilePack) >= 98 then
                                                    packY = packY - 1
                                                    tilePack = 0
                                                end
                                                while findItem(pack) > 0 do
                                                    drop(pack)
                                                    sleep(delaydrop)
                                                    identity.reconnect(world,doorstoragepack,packX + (tilePack),packY)
                                                    count = count + 1
                                                    if count >= 2 then
                                                        tilePack = tilePack + 1
                                                        goto BACK
                                                    end
                                                end
                                            end
                                            if findItem(pack) == 0 then
                                                break
                                            end
                                        end
                                    end
                                end
                                sleep(100)
                                break
                            end
                        else
                            infoid[world] = "WRONG DOOR !!!"
                            wrong = false
                            sleep(5000)
                            print("[ "..world.." ] Id door packs storage is wrong, check ur id door!")
                            identity.botinfo("[ ||"..world.."|| ] Id door packs storage is wrong, check ur id door! @everyone")
                            identity.pack = identity.pack + 1
                            if identity.pack > #storagepack then
                                print("All packs storage has reached limit")
                                identity.botinfo("All packs storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                if removingbot then
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            end
                            tilePack = 0
                        end
                    else
                        infoid[world] = "NUKED !!!"
                        nuked = false
                        sleep(5000)
                        print("[ "..world.." ] packs Storage is NUKED, check ur storage!")
                        identity.botinfo("[ "..world.." ] packs Storage is NUKED, check ur storage! @everyone")
                        identity.pack = identity.pack + 1
                        if identity.pack > #storagepack then
                            print("All packs storage has reached limit!")
                            identity.botinfo("All packs storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tilePack = 0
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto Here
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur level world limit")
                identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..identity.itemFloat(packList[1]).."]"
    if clearhistory then
        identity.joinworld()
    end
end

identity.storingseeds = function(threads)
    for i = identity.seed , #storageseed do
        ::Here::
        world = storageseed[i]
        setJob("Dropping seeds")
        identity.warp(world,doorstorageseed)
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            if identity.itemFloat(seed) >= limitseed then
                                infoid[world] = "["..identity.itemFloat(seed).."] LIMIT !!!"
                                identity.botinfo("Seeds storage : [ ||"..world.."|| ] has reached limit, skipped world @everyone")
                                print("Seeds storage : [ "..world.." ] has reached limit, skipped world")
                                identity.seed = identity.seed + 1
                                if identity.seed > #storageseed then
                                    infoid[world] = "["..identity.itemFloat(seed).."] LIMIT !!!"
                                    identity.botinfo("All seeds storage has reached limit, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                    print("All seeds storage has reached limit, Removing bot : [ "..getBot().name.." ] @everyone")
                                    if removingbot then
                                        removeBot(getBot().name)
                                        sleep(2000)
                                    end
                                    error()
                                end
                                tileSeed = 0
                            else
                                for i,tile in pairs(getTiles()) do
                                    if tile.fg == 0 or tile.bg == 0 then
                                        ::BACK::
                                        findPath(seedX + (tileSeed),seedY)
                                        sleep(1000)
                                        local count = 0
                                        identity.reconnect(world,doorstorageseed,seedX + (tileSeed),seedY)
                                        if seedX + (tileSeed) >= 98 then
                                            seedY = seedY - 1
                                            tileSeed = 0
                                        end
                                        while findItem(seed) > 0 do
                                            drop(seed)
                                            sleep(delaydrop)
                                            identity.reconnect(world,doorstorageseed,seedX + (tileSeed),seedY)
                                            count = count + 1
                                            if count >= 2 then
                                                tileSeed = tileSeed + 1
                                                goto BACK
                                            end
                                        end
                                    end
                                    if findItem(seed) == 0 then
                                        break
                                    end
                                end
                                sleep(100)
                                break
                            end
                        else
                            infoid[world] = "WRONG DOOR !!!"
                            wrong = false
                            sleep(5000)
                            print("[ "..world.." ] Id door seeds storage is wrong, check ur id door!")
                            identity.botinfo("[ "..world.." ] Id door seeds storage is wrong, check ur id door! @everyone")
                            identity.seed = identity.seed + 1
                            if identity.seed > #storageseed then
                                print("All seeds storage has reached limit")
                                identity.botinfo("All seeds storage has reached limit @everyone")
                                if removingbot then
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            end
                            tileSeed = 0
                        end
                    else
                        infoid[world] = "NUKED !!!"
                        nuked = false
                        sleep(5000)
                        print("[ "..world.." ] seeds Storage is NUKED, check ur storage!")
                        identity.botinfo("[ "..world.." ] seeds Storage is NUKED, check ur storage! @everyone")
                        identity.seed = identity.seed + 1
                        if identity.seed > #storageseed then
                            print("All seeds storage has reached limit!")
                            identity.botinfo("All seeds storage has reached limit! @everyone")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tileSeed = 0
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto Here
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur level world limit")
                identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..identity.itemFloat(seed).."]"
    if clearhistory then
        identity.joinworld()
    end
end

identity.take = function()
    for i = identity.block, #storageblock do
        ::Here::
        setJob("Take blocks")
		world = storageblock[i]
        identity.warp(world,doorstorageblock)
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            if identity.itemFloat(block) == 0 then
                                infoid[world] = ""..identity.itemFloat(block).." EMPTY !!"
                                identity.botinfo("Take blocks storage : [ ||"..world.."|| ] has empty, skipped world @everyone")
                                print("Take blocks storage : [ "..world.." ] has empty, skipped world")
                                identity.block = identity.block + 1
                                if identity.block > #storageblock then
                                    infoid[world] = ""..identity.itemFloat(block).." EMPTY !!"
                                    identity.botinfo("All take blocks storage has empty, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                    print("All take blocks storage has empty, Removing bot : [ "..getBot().name.." ]")
                                    identity.storingseeds()
                                    if pnbotherworld then
                                        identity.warp(find,"")
                                        while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                                            move(1,0)
                                            sleep(500)
                                        end
                                        while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32) - 1).fg == 226 do
                                            punch(0,-1)
                                            sleep(delaypunch)
                                            identity.reconnect(find,"")
                                        end
                                        identity.storingjammer()
                                    end
                                    identity.warp(find,"")   
                                    if removingbot then
                                        removeBot(getBot().name)
                                        sleep(2000)
                                    end
                                    setJob("Blocks empty")
                                    error()
                                end
                            else
                                for _, object in pairs(getObjects()) do
                                    if object.id == block then
                                        findPath(math.floor((object.x)/32), math.floor((object.y)/32))
                                        sleep(1000)
                                        collect(2,112)
                                        sleep(1000)
                                        identity.reconnect(world,doorstorageblock,math.floor((object.x)/32), math.floor((object.y)/32))
                                    end
                                    if findItem(block) >= pnbtile then
                                        break
                                    end
                                end
                                sleep(100)
                                break
                            end
                        else
                            infoid[world] = "WRONG DOOR !!!"
                            wrong = false
                            sleep(5000)
                            print("[ "..world.." ] Id door Take blocks storage is wrong, check ur id door!")
                            identity.botinfo("[ ||"..world.."|| ] Id door Take blocks storage is wrong, check ur id door! @everyone")
                            identity.block = identity.block + 1
                            if identity.block > #storageblock then
                                print("All Take blocks storage has reached limit")
                                identity.botinfo("All Take blocks storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                if removingbot then
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            end
                        end
                    else
                        infoid[world] = "NUKED !!!"
                        nuked = false
                        sleep(5000)
                        print("[ "..world.." ] take blocks Storage is NUKED, check ur storage!")
                        identity.botinfo("[ "..world.." ] take blocks Storage is NUKED, check ur storage! @everyone")
                        identity.block = identity.block + 1
                        if identity.block > #storageblock then
                            print("All take blocks storage has reached limit!")
                            identity.botinfo("All take blocks storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto Here
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur level world limit")
                identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..identity.itemFloat(block).."]"
    if recycle then
        identity.recycles(threads)
    end
    identity.line(threads)
end

identity.storingblocks = function(threads)
    for i = identity.drop , #storageblock do
        ::Here::
        world = storageblock[i]
        setJob("Dropping Blocks")
        identity.warp(world,doorstorageblock)
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            for i,tile in pairs(getTiles()) do
                                if tile.fg == 0 or tile.bg == 0 then
                                    ::BACK::
                                    findPath(blockX + (tileBlock),blockY)
                                    sleep(1000)
                                    local count = 0
                                    identity.reconnect(world,doorstorageblock,blockX + (tileBlock),blockY)
                                    if blockX + (tileBlock) >= 98 then
                                        blockY = blockY - 1
                                        tileBlock = 0
                                    end
                                    while findItem(block) > 0 do
                                        drop(block)
                                        sleep(delaydrop)
                                        identity.reconnect(world,doorstorageblock,blockX + (tileBlock),blockY)
                                        count = count + 1
                                        if count >= 2 then
                                            tileBlock = tileBlock + 1
                                            goto BACK
                                        end
                                    end
                                end
                                if findItem(block) == 0 then
                                    break
                                end
                            end
                            sleep(100)
                            break
                        else
                            infoid[world] = "WRONG DOOR !!!"
                            wrong = false
                            sleep(5000)
                            print("[ "..world.." ] Id door blocks storage is wrong, check ur id door!")
                            identity.botinfo("[ ||"..world.."|| ] Id door blocks storage is wrong, check ur id door! @everyone")
                            identity.drop = identity.drop + 1
                            if identity.drop > #storageblock then
                                print("All blocks storage has reached limit")
                                identity.botinfo("All blocks storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                if removingbot then
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            end
                            tileBlock = 0
                        end
                    else
                        infoid[world] = "NUKED !!!"
                        nuked = false
                        sleep(5000)
                        print("[ "..world.." ] blocks Storage is NUKED, check ur storage!")
                        identity.botinfo("[ "..world.." ] blocks Storage is NUKED, check ur storage! @everyone")
                        identity.drop = identity.drop + 1
                        if identity.drop > #storageblock then
                            print("All blocks storage has reached limit!")
                            identity.botinfo("All blocks storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tileBlock = 0
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto Here
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur level world limit")
                identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..identity.itemFloat(block).."]"
    if clearhistory then
        identity.joinworld()
    end
end

identity.takingseed = function(threads)
    for i = identity.takeseed , #storageseed do
        ::BACK::
        setJob("Take seed")
        world = storageseed[i]
        identity.warp(world,doorstorageseed)
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            if not looping then
                                if identity.itemFloat(seed) == 0 then
                                    if not typescript == "pabrik" then
                                        infoid[world] = ""..identity.itemFloat(seed).." EMPTY !!"
                                        identity.botinfo("Seeds storage : [ ||"..world.."|| ] has empty, skipped world @everyone")
                                        print("Seeds storage : [ "..world.." ] has empty, skipped world")
                                        identity.takeseed = identity.takeseed + 1
                                        if identity.takeseed > #storageseed then
                                            infoid[world] = ""..identity.itemFloat(seed).." EMPTY !!"
                                            identity.botinfo("All seeds storage has empty, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                            print("All seeds storage has empty, Removing bot : [ "..getBot().name.." ]")
                                            if removingbot then
                                                removeBot(getBot().name)
                                                sleep(2000)
                                            end
                                            error()
                                        end
                                    end
                                else
                                    for _, object in pairs(getObjects()) do
                                        if object.id == seed then
                                            findPath(math.floor((object.x)/32), math.floor((object.y)/32))
                                            sleep(1000)
                                            collect(2)
                                            sleep(1000)
                                            identity.reconnect(world,doorstorageseed,math.floor((object.x)/32), math.floor((object.y)/32))
                                        end
                                        if typescript == "pabrik" then
                                            if findItem(seed) > 100 then
                                                move(-1,0)
                                                sleep(1000)
                                                drop(seed,findItem(seed) - 100)
                                                sleep(1000)
                                                break
                                            end
                                        else
                                            if findItem(seed) > 0 then
                                                break
                                            end
                                        end
                                    end
                                    if splice then
                                        for _, object in pairs(getObjects()) do
                                            if object.id == seedsplice then
                                                findPath(math.floor((object.x)/32), math.floor((object.y)/32))
                                                sleep(1000)
                                                collect(2)
                                                sleep(1000)
                                                identity.reconnect(world,doorstorageseed,math.floor((object.x)/32), math.floor((object.y)/32))
                                            end
                                            if findItem(seedsplice) > 0 then
                                                break
                                            end
                                        end
                                    end
                                    sleep(100)
                                    break
                                end
                            else
                                for _, object in pairs(getObjects()) do
                                    if object.id == seed then
                                        findPath(math.floor((object.x)/32), math.floor((object.y)/32))
                                        sleep(1000)
                                        collect(2)
                                        sleep(1000)
                                        identity.reconnect(world,doorstorageseed,math.floor((object.x)/32), math.floor((object.y)/32))
                                    end
                                    if findItem(seed) > 0 then
                                        break
                                    end
                                end
                                if splice then
                                    for _, object in pairs(getObjects()) do
                                        if object.id == seedsplice then
                                            findPath(math.floor((object.x)/32), math.floor((object.y)/32))
                                            sleep(1000)
                                            collect(2)
                                            sleep(1000)
                                            identity.reconnect(world,doorstorageseed,math.floor((object.x)/32), math.floor((object.y)/32))
                                        end
                                        if findItem(seedsplice) > 0 then
                                            break
                                        end
                                    end
                                end
                                sleep(100)
                                break
                            end
                        else
                            infoid[world] = "WRONG DOOR ID"
                            wrong = false
                            sleep(5000)
                            identity.botinfo("Seeds storage : [ ||"..world.."|| ] is wrong door id, skipped world @everyone")
                            print("Seeds storage : [ "..world.." ] is wrong door id, skipped world")
                            identity.takeseed = identity.takeseed + 1
                            if identity.takeseed > #storageseed then
                                identity.botinfo("All seeds storage has empty, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                print("All seeds storage has empty, Removing bot : [ "..getBot().name.." ]")
                                if removingbot then
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            end
                        end
                    else
                        infoid[world] = "NUKED"
                        nuked = false
                        sleep(5000)
                        identity.botinfo("Seeds storage : [ ||"..world.."|| ] is NUKED, skipped world @everyone")
                        print("Seeds storage : [ "..world.." ] is NUKED, skipped world")
                        identity.takeseed = identity.takeseed + 1
                        if identity.takeseed > #storageseed then
                            identity.botinfo("All seeds storage has empty, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                            print("All seeds storage has empty, Removing bot : [ "..getBot().name.." ]")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto BACK
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur level world limit")
                identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto BACK
        end
    end
    infoid[world] = ""..identity.itemFloat(seed)..""
end

identity.line = function(threads)
    identity.param = 0
    ::Check::
    if findItem(98) == 0 and takepickaxe and getBot().status == "online" then
        identity.takepickaxe()
        goto Check
    end
    setJob("Set up Line")
    if not pnbotherworld then
        ::Here::
        world = identity.splitt(worldpnb[index],"[^:]+")[1]
        door = identity.splitt(worldpnb[index],"[^:]+")[2]
        identity.warp(world,door)
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            if identity.itemFloat(112) >= limitgems then
                                if findItem(block) > 0 then
                                    identity.storingblocks()
                                end
                                if findItem(seed) > 0 then
                                    identity.storingseeds()
                                end
                                identity.warp(find,"")
                                if removingbot then
                                    identity.botinfo("Gems at world pnb has reached limit")
                                    print("Gems at world pnb has reached limit")
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            else
                                if typepnbmode == "nogaut" then
                                    if pnbtile == 1 then
                                        identity.botline = pnbtile + 3
                                        for _,tile in pairs(getTiles()) do
                                            for strs,bot in pairs(getBots()) do
                                                if bot.name == getBot().name then
                                                    findPath(barisX - identity.param,barisY)
                                                    sleep(1000)
                                                    identity.reconnect(world,door,barisX,barisY)
                                                    break
                                                else
                                                    identity.param = identity.param + identity.botline
                                                end
                                            end
                                            break
                                        end
                                    else
                                        identity.botline = pnbtile + 1
                                        for _,tile in pairs(getTiles()) do
                                            for strs,bot in pairs(getBots()) do
                                                if bot.name == getBot().name then
                                                    findPath(barisX - identity.param,barisY)
                                                    sleep(1000)
                                                    identity.reconnect(world,door,barisX,barisY)
                                                    break
                                                else
                                                    identity.param = identity.param + identity.botline
                                                end
                                            end
                                            break
                                        end
                                    end
                                elseif typepnbmode == "gaut" then
                                    identity.botline = pnbtile
                                    for _,tile in pairs(getTiles()) do
                                        for strs,bot in pairs(getBots()) do
                                            if bot.name == getBot().name then
                                                findPath(barisX - identity.param,barisY)
                                                sleep(1000)
                                                identity.reconnect(world,door,barisX,barisY)
                                                break
                                            else
                                                identity.param = identity.param + identity.botline
                                            end
                                        end
                                        break
                                    end
                                end
                            end
                        else
                            wrong = false
                            sleep(5000)
                            identity.botinfo("World pnb : [ ||"..world.."|| ] is Wrong door, terminated script @everyone")
                            print("World pnb : [ "..world.." ] is Wrong door, terminated script")
                            error()
                        end
                    else
                        nuked = false
                        sleep(5000)
                        identity.botinfo("World pnb : [ ||"..world.."|| ] is NUKED @everyone")
                        print("World pnb : [ "..world.." ] is NUKED, terminated script")
                        error()
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto Here
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur level world limit")
                identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
        identity.pnb(world,door)
    else
        ::Here::
        botX = math.floor(getBot().x / 32)
        botY = math.floor(getBot().y / 32)
        identity.warp(find,"")
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            while math.floor(getBot().x / 32) ~= posX or math.floor(getBot().y / 32) ~= posY do
                                findPath(posX,posY)
                                sleep(500)
                            end
                            identity.pnb(find,"")
                        else
                            wrong = false
                            sleep(5000)
                            identity.botinfo("World pnb : [ ||"..world.."|| ] is Wrong door, terminated script @everyone")
                            print("World pnb : [ "..world.." ] is Wrong door, terminated script")
                            error()
                        end
                    else
                        nuked = false
                        sleep(5000)
                        identity.botinfo("World pnb : [ ||"..world.."|| ] is NUKED @everyone")
                        print("World pnb : [ "..world.." ] is NUKED, terminated script")
                        error()
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto Here
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur level world limit")
                identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
    end
    if typepnbmode == "nogaut" then
        if storeseedafterpnb then
            identity.storingseeds(threads)
            identity.take(threads)
        else
            identity.take(threads)
        end
    elseif typepnbmode == "gaut" then
        world = identity.splitt(worldpnb[index],"[^:]+")[1]
        door = identity.splitt(worldpnb[index],"[^:]+")[2]
        for _, obj in pairs(getObjects()) do
            if obj.id == seed then
                findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                sleep(1000)
                collect(2,112)
                sleep(1000)
                identity.reconnect(world,door,math.floor(obj.x / 32),math.floor(obj.y / 32))
            end
        end
        if typescript == "pnb" then
            if findItem(seed) > 0 then
                identity.storingseeds(threads)
                identity.take(threads)
            else
                identity.take(threads)
            end
        elseif typescript == "sellgems" then
            if findItem(seed) > 0 then
                identity.storingseeds(threads)
                identity.warp(threads,doorfarmList)
            end
        end
    end
end

identity.pnb = function(name,id)
    setJob(string.upper(typescript))
    collectSet(false)
    botX = math.floor(getBot().x / 32)
    botY = math.floor(getBot().y / 32)
    if pnbtile == 1 then
        while findItem(block) >= pnbtile do
            if getTile(botX,botY + tileY).bg ~= 0 or getTile(botX, botY + tileY).fg ~= 0 then
                punch(0,tileY)
                sleep(delaypunch)
                identity.reconnect(name,id,botX,botY)
            end
            if getTile(botX,botY + tileY).bg == 0 or getTile(botX, botY + tileY).fg == 0 then
                place(block,0,tileY)
                sleep(delayplace)
                identity.reconnect(name,id,botX,botY)
            end
            if typepnbmode == "nogaut" then
                collect(3)
                sleep(30)
            end
            if getBot().level >= maxlevel and backuplevel then
                identity.checkaccount(threads)
                identity.line(threads)
            end
            if findItem(seed) >= amountseed then
                identity.storingseeds(threads)
                identity.line(threads)
            elseif findItem(112) >= mingems and buypack then
                identity.buying(threads)
                identity.storingpacks(threads)
                identity.line(threads)
            end
        end
    else
        while findItem(block) >= pnbtile do
            while identity.placeitem(botX,botY) do
                for _,i in pairs(tilebreak) do
                    if getTile(botX + i,botY + tileY).fg == 0 and getTile(botX + i,botY + tileY).bg == 0 then
                        place(block,i,tileY)
                        sleep(delayplace)
                        identity.reconnect(name,id,botX,botY)
                    end
                end
            end
            while identity.punchitem(botX,botY) do
                for _,i in pairs(tilebreak) do
                    if getTile(botX + i,botY + tileY).fg ~= 0 or getTile(botX + i,botY + tileY).bg ~= 0 then
                        punch(i,tileY)
                        sleep(delaypunch)
                        identity.reconnect(name,id,botX,botY)
                    end
                end
            end
            if typepnbmode == "nogaut" then
                collect(3)
                sleep(30)
            end
            if getBot().level >= maxlevel and backuplevel then
                identity.checkaccount(threads)
                identity.line(threads)
            end
            if findItem(seed) >= amountseed then
                identity.storingseeds(threads)
                identity.line(threads)
            elseif findItem(112) >= mingems and buypack then
                identity.buying(threads)
                identity.storingpacks(threads)
                identity.line(threads)
            end
        end
    end
end

identity.rotate = function(threads)
    if typescript == "rotation" then
        if not pnbotherworld then
            ::BACK::
            setJob("PNB")
            while math.floor(getBot().x / 32) ~= 10 or math.floor(getBot().y / 32) ~= 1 do
                findPath(10,1)
                sleep(500)
            end
            botX = math.floor(getBot().x / 32)
            botY = math.floor(getBot().y / 32)
            if pnbtile == 1 then
                while findItem(block) >= pnbtile do
                    if getTile(botX,botY + tileY).bg ~= 0 or getTile(botX, botY + tileY).fg ~= 0 then
                        punch(0,tileY)
                        sleep(delaypunch)
                        identity.reconnect(threads,doorfarmList,botX,botY)
                    end
                    if getTile(botX,botY + tileY).bg == 0 or getTile(botX, botY + tileY).fg == 0 then
                        place(block,0,tileY)
                        sleep(delayplace)
                        identity.reconnect(threads,doorfarmList,botX,botY)
                    end
                    collect(2)
                    sleep(30)
                    if getBot().level >= maxlevel and backuplevel then
                        identity.checkaccount(threads)
                        setJob("Pnb")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                        goto BACK
                    end
                    if findItem(112) >= mingems and buypack then
                        identity.buying(threads)
                        identity.storingpacks(threads)
                        setJob("Pnb")
                        identity.warp(threads,doorfarmList)
                        goto BACK
                    end
                end
            else
                while findItem(block) >= pnbtile do
                    while identity.placeitem(botX,botY) do
                        for _,i in pairs(tilebreak) do
                            if getTile(botX + i,botY + tileY).fg == 0 and getTile(botX + i,botY + tileY).bg == 0 then
                                place(block,i,tileY)
                                sleep(delayplace)
                                identity.reconnect(threads,doorfarmList,botX,botY)
                            end
                        end
                    end
                    while identity.punchitem(botX,botY) do
                        for _,i in pairs(tilebreak) do
                            if getTile(botX + i,botY + tileY).fg ~= 0 or getTile(botX + i,botY + tileY).bg ~= 0 then
                                punch(i,tileY)
                                sleep(delaypunch)
                                identity.reconnect(threads,doorfarmList,botX,botY)
                            end
                        end
                    end
                    collect(3)
                    sleep(30)
                    if getBot().level >= maxlevel and backuplevel then
                        identity.checkaccount(threads)
                        setJob("Pnb")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                        goto BACK
                    end
                    if findItem(112) >= mingems and buypack then
                        identity.buying(threads)
                        identity.storingpacks(threads)
                        setJob("Pnb")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                        goto BACK
                    end
                end
            end
        else
            ::BACK::
            setJob("PNB")
            identity.warp(find,"")
            identity.webhookinfo()
            if not people then
                if not level then
                    if not subserver then
                        if not nuked then
                            while math.floor(getBot().x / 32) ~= posX or math.floor(getBot().y / 32) ~= posY do
                                findPath(posX,posY)
                                sleep(500)
                            end
                            botX = math.floor(getBot().x / 32)
                            botY = math.floor(getBot().y / 32)
                            if pnbtile == 1 then
                                while findItem(block) >= pnbtile do
                                    if getTile(botX,botY + tileY).bg ~= 0 or getTile(botX, botY + tileY).fg ~= 0 then
                                        punch(0,tileY)
                                        sleep(delaypunch)
                                        identity.reconnect(find,"",botX,botY)
                                    end
                                    if getTile(botX,botY + tileY).bg == 0 or getTile(botX, botY + tileY).fg == 0 then
                                        place(block,0,tileY)
                                        sleep(delayplace)
                                        identity.reconnect(find,"",botX,botY)
                                    end
                                    collect(2)
                                    sleep(30)
                                    if getBot().level >= maxlevel and backuplevel then
                                        identity.checkaccount(threads)
                                        goto BACK
                                    end
                                    if findItem(112) >= mingems and buypack then
                                        identity.buying(threads)
                                        identity.storingpacks(threads)
                                        goto BACK
                                    end
                                end
                            else
                                while findItem(block) >= pnbtile do
                                    while identity.placeitem(botX,botY) do
                                        for _,i in pairs(tilebreak) do
                                            if getTile(botX + i,botY + tileY).fg == 0 and getTile(botX + i,botY + tileY).bg == 0 then
                                                place(block,i,tileY)
                                                sleep(delayplace)
                                                identity.reconnect(find,"",botX,botY)
                                            end
                                        end
                                    end
                                    while identity.punchitem(botX,botY) do
                                        for _,i in pairs(tilebreak) do
                                            if getTile(botX + i,botY + tileY).fg ~= 0 or getTile(botX + i,botY + tileY).bg ~= 0 then
                                                punch(i,tileY)
                                                sleep(delaypunch)
                                                identity.reconnect(find,"",botX,botY)
                                            end
                                        end
                                    end
                                    collect(3)
                                    sleep(30)
                                    if getBot().level >= maxlevel and backuplevel then
                                        identity.checkaccount(threads)
                                        goto BACK
                                    end
                                    if findItem(112) >= mingems and buypack then
                                        identity.buying(threads)
                                        identity.storingpacks(threads)
                                        goto BACK
                                    end
                                end
                            end
                        else
                            nuked = false
                            sleep(5000)
                            identity.botinfo("World : [ ||"..find.."|| ] is NUKED @everyone")
                            print("World pnb : [ "..find.." ] is NUKED, terminated script")
                            error()
                        end
                    else
                        subserver = false
                        sleep(5000)
                        print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                        identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                        sleep(120000)
                        goto BACK
                    end
                else
                    level = false
                    sleep(5000)
                    print("World : "..find.." has level limit, change ur level world limit")
                    identity.botinfo("World : "..find.." has level limit, change ur level world limit !, terminated script @everyone")
                    error()
                end
            else
                people = false
                sleep(5000)
                print("World : "..find.." has full people, sleeping for 2 minutes")
                identity.botinfo("World : "..find.." has full people, sleeping for 2 minutes")
                sleep(120000)
                goto BACK
            end
        end
        if recycle then
            identity.recycles(threads)
        end
    elseif typescript == "pabrik" then
        if not takebackfactory then
            ::BACK::
            setJob("PNB")
            identity.warp(find,"")
            identity.webhookinfo()
            if not people then
                if not level then
                    if not subserver then
                        if not nuked then
                            for _, tile in pairs(getTiles()) do
                                if tile.fg == 226 then
                                    findPath(tile.x,tile.y - 1)
                                    sleep(100)
                                    identity.reconnect(find,"",tile.x,tile.y - 1)
                                end
                            end
                            botX = math.floor(getBot().x / 32)
                            botY = math.floor(getBot().y / 32)
                            if pnbtile == 1 then
                                while findItem(block) >= pnbtile do
                                    if getTile(botX,botY + tileY).bg ~= 0 or getTile(botX, botY + tileY).fg ~= 0 then
                                        punch(0,tileY)
                                        sleep(delaypunch)
                                        identity.reconnect(find,"",botX,botY)
                                    end
                                    if getTile(botX,botY + tileY).bg == 0 or getTile(botX, botY + tileY).fg == 0 then
                                        place(block,0,tileY)
                                        sleep(delayplace)
                                        identity.reconnect(find,"",botX,botY)
                                    end
                                    collect(2)
                                    sleep(30)
                                    if getBot().level >= maxlevel and backuplevel then
                                        identity.checkaccount(threads)
                                        goto BACK
                                    end
                                    if findItem(112) >= mingems and buypack then
                                        identity.buying(threads)
                                        identity.storingpacks(threads)
                                        goto BACK
                                    end
                                end
                            else
                                while findItem(block) >= pnbtile do
                                    while identity.placeitem(botX,botY) do
                                        for _,i in pairs(tilebreak) do
                                            if getTile(botX + i,botY + tileY).fg == 0 and getTile(botX + i,botY + tileY).bg == 0 then
                                                place(block,i,tileY)
                                                sleep(delayplace)
                                                identity.reconnect(find,"",botX,botY)
                                            end
                                        end
                                    end
                                    while identity.punchitem(botX,botY) do
                                        for _,i in pairs(tilebreak) do
                                            if getTile(botX + i,botY + tileY).fg ~= 0 or getTile(botX + i,botY + tileY).bg ~= 0 then
                                                punch(i,tileY)
                                                sleep(delaypunch)
                                                identity.reconnect(find,"",botX,botY)
                                            end
                                        end
                                    end
                                    collect(3)
                                    sleep(30)
                                    if getBot().level >= maxlevel and backuplevel then
                                        identity.checkaccount(threads)
                                        goto BACK
                                    end
                                    if findItem(112) >= mingems and buypack then
                                        identity.buying(threads)
                                        identity.storingpacks(threads)
                                        goto BACK
                                    end
                                end
                            end
                        else
                            nuked = false
                            sleep(5000)
                            identity.botinfo("World : [ ||"..find.."|| ] is NUKED @everyone")
                            print("World pnb : [ "..find.." ] is NUKED, terminated script")
                            error()
                        end
                    else
                        subserver = false
                        sleep(5000)
                        print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                        identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                        sleep(120000)
                        goto BACK
                    end
                else
                    level = false
                    sleep(5000)
                    print("World : "..find.." has level limit, change ur level world limit")
                    identity.botinfo("World : "..find.." has level limit, change ur level world limit !, terminated script @everyone")
                    error()
                end
            else
                people = false
                sleep(5000)
                print("World : "..find.." has full people, sleeping for 2 minutes")
                identity.botinfo("World : "..find.." has full people, sleeping for 2 minutes")
                sleep(120000)
                goto BACK
            end
        else
            ::Try::
            for _, tile in pairs(getTiles()) do
                if tile.fg == 226 then
                    findPath(tile.x,tile.y - 1)
                    sleep(100)
                    identity.reconnect(threads,"",tile.x,tile.y - 1)
                end
            end
            botX = math.floor(getBot().x / 32)
            botY = math.floor(getBot().y / 32)
            if pnbtile == 1 then
                while findItem(block) >= pnbtile do
                    if getTile(botX,botY + tileY).bg ~= 0 or getTile(botX, botY + tileY).fg ~= 0 then
                        punch(0,tileY)
                        sleep(delaypunch)
                        identity.reconnect(threads,"",botX,botY)
                    end
                    if getTile(botX,botY + tileY).bg == 0 or getTile(botX, botY + tileY).fg == 0 then
                        place(block,0,tileY)
                        sleep(delayplace)
                        identity.reconnect(threads,"",botX,botY)
                    end
                    collect(2)
                    sleep(30)
                    if getBot().level >= maxlevel and backuplevel then
                        identity.checkaccount(threads)
                        setJob("Take Back")
                        identity.warp(threads,"")
                        identity.webhookinfo()
                        goto Try
                    end
                    if findItem(112) >= mingems and buypack then
                        identity.buying(threads)
                        identity.storingpacks(threads)
                        setJob("Take Back")
                        identity.warp(threads,"")
                        identity.webhookinfo()
                        goto Try
                    end
                end
            else
                while findItem(block) >= pnbtile do
                    while identity.placeitem(botX,botY) do
                        for _,i in pairs(tilebreak) do
                            if getTile(botX + i,botY + tileY).fg == 0 and getTile(botX + i,botY + tileY).bg == 0 then
                                place(block,i,tileY)
                                sleep(delayplace)
                                identity.reconnect(threads,"",botX,botY)
                            end
                        end
                    end
                    while identity.punchitem(botX,botY) do
                        for _,i in pairs(tilebreak) do
                            if getTile(botX + i,botY + tileY).fg ~= 0 or getTile(botX + i,botY + tileY).bg ~= 0 then
                                punch(i,tileY)
                                sleep(delaypunch)
                                identity.reconnect(threads,"",botX,botY)
                            end
                        end
                    end
                    collect(3)
                    sleep(30)
                    if getBot().level >= maxlevel and backuplevel then
                        identity.checkaccount(threads)
                        setJob("Take Back")
                        identity.warp(threads,"")
                        identity.webhookinfo()
                        goto Try
                    end
                    if findItem(112) >= mingems and buypack then
                        identity.buying(threads)
                        identity.storingpacks(threads)
                        setJob("Take Back")
                        identity.warp(threads,"")
                        identity.webhookinfo()
                        goto Try
                    end
                end
            end
        end
    end
end

identity.recycles = function(threads)
    setJob("Recycling items")
    if typescript == "ht" then
        if findItem(block) > 0 then
            sendPacket("action|trash\n|itemID|" .. block,2)
            sleep(4000)
            sendPacket("action|dialog_return\ndialog_name|trash_item\nitemID|" .. block .. "|\ncount|" .. findItem(block),2)
            sleep(4000)
        end
    elseif typescript == "pnb" or typescript == "rotation" or typescript == "pabrik" then
        for i , list in ipairs(trashList) do
            if findItem(list) > amount then
                sendPacket("action|trash\n|itemID|" .. list,2)
                sleep(4000)
                sendPacket("action|dialog_return\ndialog_name|trash_item\nitemID|" .. list .. "|\ncount|" .. findItem(list),2)
                sleep(4000)
            end
        end
    end
end

identity.rechecking = function(threads)
    setJob("Rechecking")
    if getBot().world ~= threads then
        identity.warp(threads,doorfarmList)
    end
    if typescript == "ht" then
        for _, tile in pairs(getTiles()) do
            if tile.fg == seed and tile.ready then
                findPath(tile.x,tile.y)
                sleep(delayharvest)
                identity.reconnect(threads,doorfarmList,tile.x,tile.y)
                if tile.fg == seed then
                    punch(0,0)
                    sleep(delayharvest)
                    identity.reconnect(threads,doorfarmList,tile.x,tile.y)
                end
                if ignoregems then
                    collect(range,112)
                else
                    collect(range)
                end
                sleep(delaycollect)
            end
            if findItem(idwearitem) == 0 then
                if wearitem then
                    identity.support(threads)
                    setJob("Rechecking")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                end
            end
            if findItem(block) > 180 then
                if recycle then
                    identity.recycles(threads)
                    setJob("Rechecking")
                else
                    identity.storingblocks(threads)
                    setJob("Rechecking")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                end
            end
            if findItem(itemevent[1]) > amount then
                identity.storingevents(threads)
                setJob("Rechecking")
                identity.warp(threads,doorfarmList)
                identity.webhookinfo()
            elseif findItem(seed) > 180 then
                identity.storingseeds(threads)
                setJob("Rechecking")
                identity.warp(threads,doorfarmList)
                identity.webhookinfo()
            elseif findItem(112) > mingems and buypack then
                identity.buying(threads)
                identity.storingpacks(threads)
                setJob("Rechecking")
                identity.warp(threads,doorfarmList)
                identity.webhookinfo()
            end
        end
        for _, obj in pairs(getObjects()) do
            if obj.id == block then
                if identity.itemFloat(block) ~= 0 then
                    findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                    sleep(delaycollect)
                    if ignoregems then
                        collect(range,112)
                    else
                        collect(range)
                    end
                    sleep(delaycollect)
                    identity.reconnect(threads,doorfarmList,math.floor(obj.x / 32),math.floor(obj.y / 32))
                end
                if findItem(block) > 180 then
                    if recycle then
                        identity.recycles(threads)
                        setJob("Rechecking")
                    else
                        identity.storingblocks(threads)
                        setJob("Rechecking")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    end
                end
                if findItem(itemevent[1]) > amount then
                    identity.storingevents(threads)
                    setJob("Rechecking")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                elseif findItem(seed) > 180 then
                    identity.storingseeds(threads)
                    setJob("Rechecking")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                elseif findItem(112) > mingems and buypack then
                    identity.buying(threads)
                    identity.storingpacks(threads)
                    setJob("Rechecking")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                end
            end
        end
    elseif typescript == "pt" then
        for _, tile in pairs(getTiles()) do
            if tile.fg == 0 and getTile(tile.x, tile.y + 1).flags ~= 0 then
                findPath(tile.x,tile.y)
                sleep(delayplant)
                if getTile(tile.x,tile.y).fg ~= seed then
                    place(seed,0,0)
                    sleep(delayplant)
                    identity.reconnect(threads,doorfarmList,tile.x,tile.y)
                end
            end
            if findItem(seed) == 0 then
                identity.takingseed(threads)
                setJob("Rechecking")
                identity.warp(threads,doorfarmList)
                identity.webhookinfo()
            end
        end
    elseif typescript == "rotation" or typescript == "sellgems" then
        if not leveling then
            ::BACK::
            for _, tile in pairs(getTiles()) do
                if tile.fg == seed and tile.ready then
                    findPath(tile.x,tile.y)
                    sleep(delayharvest)
                    identity.reconnect(threads,doorfarmList,tile.x,tile.y)
                    if tile.fg == seed then
                        punch(0,0)
                        sleep(delayharvest)
                        identity.reconnect(threads,doorfarmList,tile.x,tile.y)
                    end
                    if ignoregems then
                        collect(range,112)
                    else
                        collect(range)
                    end
                    sleep(delaycollect)
                end
                if findItem(idwearitem) == 0 then
                    if wearitem then
                        identity.support(threads)
                        setJob("Rechecking")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    end
                end
                if findItem(block) > 180 then
                    if typescript == "rotation" then
                        if pnbotherworld then
                            identity.rotate(threads)
                            setJob("Rechecking")
                            identity.warp(threads,doorfarmList)
                            identity.webhookinfo()
                        else
                            identity.rotate(threads)
                        end
                    elseif typescript == "sellgems" then
                        identity.line(threads)
                    end
                end
                if findItem(itemevent[1]) > amount then
                    identity.storingevents(threads)
                    setJob("Rechecking")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                elseif findItem(seed) >= amountseed then
                    if dontplant then
                        identity.storingseeds(threads)
                        setJob("Rechecking")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    else
                        identity.plant(threads)
                        goto BACK
                    end
                elseif findItem(112) > mingems and buypack then
                    identity.buying(threads)
                    identity.storingpacks(threads)
                    setJob("Rechecking")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                end
            end
            for _, obj in pairs(getObjects()) do
                if obj.id == block then
                    if identity.itemFloat(block) ~= 0 then
                        findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                        sleep(delaycollect)
                        if ignoregems then
                            collect(range,112)
                        else
                            collect(range)
                        end
                        sleep(delaycollect)
                        identity.reconnect(threads,doorfarmList,math.floor(obj.x / 32),math.floor(obj.y / 32))
                    end
                    if findItem(block) > 180 then
                        if typescript == "rotation" then
                            if pnbotherworld then
                                identity.rotate(threads)
                                setJob("Rechecking")
                                identity.warp(threads,doorfarmList)
                                identity.webhookinfo()
                            else
                                identity.rotate(threads)
                            end
                        elseif typescript == "sellgems" then
                            identity.line(threads)
                        end
                    end
                    if findItem(itemevent[1]) > amount then
                        identity.storingevents(threads)
                        setJob("Rechecking")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    elseif findItem(seed) > 180 then
                        identity.storingseeds(threads)
                        setJob("Rechecking")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    elseif findItem(112) > mingems and buypack then
                        identity.buying(threads)
                        identity.storingpacks(threads)
                        setJob("Rechecking")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    end
                end
            end
            for _, tile in pairs(getTiles()) do
                if tile.fg == block or tile.bg == block then
                    findPath(tile.x,tile.y)
                    identity.reconnect(threads,doorfarmList,tile.x,tile.y)
                    local count = 0
                    while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).bg == block or getTile(math.floor(getBot().x / 32), math.floor(getBot().y / 32)).fg == block do
                        punch(0,0)
                        sleep(delaypunch)
                        identity.reconnect(threads,doorfarmList,tile.x,tile.y)
                        count = count + 1
                        if count == 100 then
                            print("This world : "..threads.." has burn, skipped world")
                            identity.botinfo("This world : "..threads.." has burn, skipped world")
                            break
                        end
                    end
                    collect(3)
                    sleep(30)
                end
            end
            if not dontplant then
                for _, tile in pairs(getTiles()) do
                    if tile.fg == 0 and getTile(tile.x, tile.y + 1).flags ~= 0 then
                        if findItem(seed) == 0 then
                            identity.takingseed(threads)
                            setJob("Rechecking")
                            identity.warp(threads,doorfarmList)
                            identity.webhookinfo()
                            if findItem(seed) ~= 0 then 
                                goto BACK
                            else
                                break
                            end
                        end
                        findPath(tile.x,tile.y)
                        sleep(delayplant)
                        if getTile(tile.x,tile.y).fg ~= seed then
                            place(seed,0,0)
                            sleep(delayplant)
                            identity.reconnect(threads,doorfarmList,tile.x,tile.y)
                        end
                    end
                end
                if findItem(seed) >= amountseed then
                    identity.storingseeds(threads)
                    setJob("Rechecking")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                end
            end
        end
    end
end

identity.takejammer = function(threads)
    ::BACK::
    setJob("Take jammers")
    world = identity.splitt(worldjammer[index],"[^:]+")[1]
    door = identity.splitt(worldjammer[index],"[^:]+")[2]
    identity.warp(world,door)
    identity.webhookinfo()
    if not people then
        if not level then
            if not subserver then
                if not nuked then
                    if not wrong then
                        if identity.itemFloat(226) > 0 then
                            for _, object in pairs(getObjects()) do
                                if object.id == 226 then
                                    findPath(math.floor((object.x)/32), math.floor((object.y)/32))
                                    sleep(1000)
                                    collect(2,112)
                                    sleep(1000)
                                    identity.reconnect(world,door,math.floor((object.x)/32), math.floor((object.y)/32))
                                end
                                if findItem(226) > 1 then
                                    move(-1,0)
                                    sleep(1000)
                                    drop(226,findItem(226) - 1)
                                    sleep(2000)
                                    break
                                end
                            end
                        end
                    else
                        wrong = false
                        sleep(5000)
                        identity.botinfo("World to take jammers is wrong door id, terminated sc @everyone")
                        print("World to take jammers is wrong door id, terminated sc")
                        error()
                    end
                else
                    nuked = false
                    sleep(5000)
                    identity.botinfo("World to take jammers is NUKED, terminated sc @everyone")
                    print("World to take jammers is NUKED, terminated sc")
                    error()
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto BACK
            end
        else
            level = false
            sleep(5000)
            print("World to take jammers has level limit, change ur level world limit")
            identity.botinfo("World to take jammers has level limit, change ur level world limit !, terminated script @everyone")
            error()
        end
    else
        people = false
        sleep(5000)
        print("World to take jammers has full people, sleeping for 2 minutes")
        identity.botinfo("World to take jammers has full people, sleeping for 2 minutes")
        sleep(120000)
        goto BACK
    end
end

identity.storingjammer = function()
    ::BACK::
    setJob("Storing jammer")
    world = identity.splitt(worldjammer[index],"[^:]+")[1]
    door = identity.splitt(worldjammer[index],"[^:]+")[2]
    identity.warp(world,door)
    identity.webhookinfo()
    if not people then
        if not level then
            if not subserver then
                if not nuked then
                    if not wrong then
                        while findItem(226) > 0 do
                            drop(226)
                            sleep(delaydrop)
                            move(0,-1)
                            sleep(delaydrop)
                        end
                    else
                        wrong = false
                        sleep(5000)
                        identity.botinfo("World to storing jammers is wrong door id, terminated sc @everyone")
                        print("World to storing jammers is wrong door id, terminated sc")
                        error()
                    end
                else
                    nuked = false
                    sleep(5000)
                    identity.botinfo("World to storing jammers is NUKED, terminated sc @everyone")
                    print("World to storing jammers is NUKED, terminated sc")
                    error()
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto BACK
            end
        else
            level = false
            sleep(5000)
            print("World to storing jammers has level limit, change ur level world limit")
            identity.botinfo("World : to storing jammers has level limit, change ur level world limit !, terminated script @everyone")
            error()
        end
    else
        people = false
        sleep(5000)
        print("World to storing jammers has full people, sleeping for 2 minutes")
        identity.botinfo("World to storing jammers has full people, sleeping for 2 minutes")
        sleep(120000)
        goto BACK
    end
end

identity.support = function(threads)
    ::BACK::
    setJob("Take support items")
    world = identity.splitt(worldwearitem[index],"[^:]+")[1]
    door = identity.splitt(worldwearitem[index],"[^:]+")[2]
    identity.warp(world,door)
    identity.webhookinfo()
    if not people then
        if not level then
            if not subserver then
                if not nuked then
                    if not wrong then
                        if findItem(idwearitem) == 0 and identity.itemFloat(idwearitem) >= keep then
                            for _, obj in pairs(getObjects()) do
                                if obj.id == idwearitem then
                                    findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                                    sleep(1000)
                                    collect(range)
                                    sleep(1000)
                                    if findItem(idwearitem) > 0  then
                                        move(-1,0)
                                        sleep(500)
                                        wear(idwearitem)
                                        sleep(500)
                                        drop(idwearitem,findItem(idwearitem) - keep)
                                        sleep(500)
                                        print("[ ||"..getBot().name.."|| ] Success take and wear the support items!")
                                        identity.botinfo("[ ||"..getBot().name.."|| ] Success take and wear the support items!")
                                        break
                                    end
                                end
                            end
                        else
                            print("Support item is empty, Drop the support item right now!")
                            identity.botinfo("Support item is empty, Drop the support item right now! @everyone")
                        end
                    else
                        wrong = false
                        sleep(5000)
                        print("Id door world take support items is wrong, check ur id door!")
                        identity.botinfo("Id door world take support items is wrong, check ur id door! @everyone")
                        error()
                    end
                else
                    nuked = false
                    sleep(5000)
                    print("World take support items is nuked, check ur world!")
                    identity.botinfo("World take support items is nuked, check ur world! @everyone")
                    error()
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto BACK
            end
        else
            level = false
            sleep(5000)
            print("World take support has level limit, change ur level world limit !, terminated script @everyone")
            identity.botinfo("World take support has level limit, change ur level world limit !, terminated script @everyone")
            error()
        end
    else
        people = false
        sleep(5000)
        print("World take support has full people, sleeping for 2 minutes")
        identity.botinfo("World take support has full people, sleeping for 2 minutes")
        sleep(120000)
        goto BACK
    end
end

identity.leveling = function(threads)
    setJob("Leveling")
    tileA = 99
    tileB = 0
    tileC = -1
    tileD = 0
    for y = -1, 53 do
        for x = tileA, tileB, tileC do
            if getTile(x,y).fg == seed and getTile(x,y).ready then
                if getBot().level >= setmaxlevel then
                    break
                end
                if findItem(seed) > 180 then
                    identity.storingseeds(threads)
                    setJob("Leveling")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                elseif findItem(112) > mingems and buypack then
                    identity.buying(threads)
                    identity.storingpacks(threads)
                    setJob("Leveling")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                end
                findPath(x,y)
                sleep(delayharvest)
                identity.reconnect(threads,doorfarmList,x,y)
                if getTile(x,y).fg == seed then
                    punch(0,0)
                    sleep(delayharvest)
                    identity.reconnect(threads,doorfarmList,x,y)
                end
                collect(range,block)
                sleep(delaycollect)
            end
        end
        if tileD == 1 then
            if tileA == 0 then
                tileA = 99
                tileB = 0
                tileC = -1
                tileD = 0
            elseif tileA == 99 then
                tileA = 0
                tileB = 99
                tileC = 1
                tileD = 0
            end
        elseif tileD == 0 then
            tileD = tileD + 1
        end
    end
end

identity.harvest = function(threads)
    setJob("Harvesting")
    tileA = 99
    tileB = 0
    tileC = -1
    tileD = 0
    if typescript == "ht" then
        for y = -1, 53 do
            for x = tileA, tileB, tileC do
                if getTile(x,y).fg == seed and getTile(x,y).ready then
                    if getBot().level >= maxlevel and backuplevel then
                        identity.checkaccount(threads)
                        setJob("Harvesting")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    end
                    if findItem(idwearitem) == 0 then
                        if wearitem then
                            identity.support(threads)
                            setJob("Harvesting")
                            identity.warp(threads,doorfarmList)
                            identity.webhookinfo()
                        end
                    end
                    if findItem(block) > 180 then
                        if recycle then
                            identity.recycles(threads)
                            setJob("Harvesting")
                        else
                            identity.storingblocks(threads)
                            setJob("Harvesting")
                            identity.warp(threads,doorfarmList)
                            identity.webhookinfo()
                        end
                    end
                    if findItem(itemevent[1]) > amount then
                        identity.storingevents(threads)
                        setJob("Harvesting")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    elseif findItem(seed) > 180 then
                        identity.storingseeds(threads)
                        setJob("Harvesting")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    elseif findItem(112) > mingems and buypack then
                        identity.buying(threads)
                        identity.storingpacks(threads)
                        setJob("Harvesting")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    end
                    findPath(x,y)
                    sleep(delayharvest)
                    identity.reconnect(threads,doorfarmList,x,y)
                    if getTile(x,y).fg == seed then
                        punch(0,0)
                        sleep(delayharvest)
                        identity.reconnect(threads,doorfarmList,x,y)
                    end
                    if ignoregems then
                        collect(range,112)
                    else
                        collect(range)
                    end
                    sleep(delaycollect)
                end
            end
            if tileD == 1 then
                if tileA == 0 then
                    tileA = 99
                    tileB = 0
                    tileC = -1
                    tileD = 0
                elseif tileA == 99 then
                    tileA = 0
                    tileB = 99
                    tileC = 1
                    tileD = 0
                end
            elseif tileD == 0 then
                tileD = tileD + 1
            end
        end
    elseif typescript == "rotation" then
        if getBot().level < setmaxlevel and leveling then
            identity.leveling(threads)
        end
        ::BACK::
        for y = -1, 53 do
            for x = tileA, tileB, tileC do
                if getTile(x,y).fg == seed and getTile(x,y).ready then
                    if getBot().level >= maxlevel and backuplevel then
                        identity.checkaccount(threads)
                        setJob("Harvesting")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    end
                    if findItem(block) > 180 then
                        identity.rotate(threads)
                        setJob("Harvesting")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    end
                    if findItem(idwearitem) == 0 then
                        if wearitem then
                            identity.support(threads)
                            setJob("Harvesting")
                            identity.warp(threads,doorfarmList)
                            identity.webhookinfo()
                        end
                    end
                    if findItem(itemevent[1]) > amount then
                        identity.storingevents(threads)
                        setJob("Harvesting")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    elseif findItem(seed) > amountseed then
                        if dontplant then
                            identity.storingseeds(threads)
                            setJob("Harvesting")
                            identity.warp(threads,doorfarmList)
                            identity.webhookinfo()
                        else
                            identity.plant(threads)
                            goto BACK
                        end
                    elseif findItem(112) > mingems and buypack then
                        identity.buying(threads)
                        identity.storingpacks(threads)
                        setJob("Harvesting")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    end
                    findPath(x,y)
                    sleep(delayharvest)
                    identity.reconnect(threads,doorfarmList,x,y)
                    if getTile(x,y).fg == seed then
                        punch(0,0)
                        sleep(delayharvest)
                        identity.reconnect(threads,doorfarmList,x,y)
                    end
                    if ignoregems then
                        collect(range,112)
                    else
                        collect(range)
                    end
                    sleep(delaycollect)
                end
            end
            if tileD == 1 then
                if tileA == 0 then
                    tileA = 99
                    tileB = 0
                    tileC = -1
                    tileD = 0
                elseif tileA == 99 then
                    tileA = 0
                    tileB = 99
                    tileC = 1
                    tileD = 0
                end
            elseif tileD == 0 then
                tileD = tileD + 1
            end
        end
    elseif typescript == "sellgems" then
        if getBot().level < setmaxlevel and leveling then
            identity.leveling(threads)
        end
        ::BACK::
        for y = -1, 53 do
            for x = tileA, tileB, tileC do
                if getTile(x,y).fg == seed and getTile(x,y).ready then
                    if getBot().level >= maxlevel and backuplevel then
                        identity.checkaccount(threads)
                        setJob("Harvesting")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    end
                    if findItem(block) > 180 then
                        identity.line(threads)
                        setJob("Harvesting")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    end
                    if findItem(idwearitem) == 0 then
                        if wearitem then
                            identity.support(threads)
                            setJob("Harvesting")
                            identity.warp(threads,doorfarmList)
                            identity.webhookinfo()
                        end
                    end
                    if findItem(itemevent[1]) > amount then
                        identity.storingevents(threads)
                        setJob("Harvesting")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    elseif findItem(seed) > amountseed then
                        if dontplant then
                            identity.storingseeds(threads)
                            setJob("Harvesting")
                            identity.warp(threads,doorfarmList)
                            identity.webhookinfo()
                        else
                            identity.plant(threads)
                            goto BACK
                        end
                    elseif findItem(112) > mingems and buypack then
                        identity.buying(threads)
                        identity.storingpacks(threads)
                        setJob("Harvesting")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    end
                    findPath(x,y)
                    sleep(delayharvest)
                    identity.reconnect(threads,doorfarmList,x,y)
                    if getTile(x,y).fg == seed then
                        punch(0,0)
                        sleep(delayharvest)
                        identity.reconnect(threads,doorfarmList,x,y)
                    end
                    if ignoregems then
                        collect(range,112)
                    else
                        collect(range)
                    end
                    sleep(delaycollect)
                end
            end
            if tileD == 1 then
                if tileA == 0 then
                    tileA = 99
                    tileB = 0
                    tileC = -1
                    tileD = 0
                elseif tileA == 99 then
                    tileA = 0
                    tileB = 99
                    tileC = 1
                    tileD = 0
                end
            elseif tileD == 0 then
                tileD = tileD + 1
            end
        end
    end
end

identity.plant = function(threads)
    setJob("Planting")
    tileA = 99
    tileB = 0
    tileC = -1
    tileD = 0
    if typescript == "pt" then
        for y = -1, 53 do
            for x = tileA, tileB, tileC do
                if getTile(x, y).fg == 0 and getTile(x, y + 1).flags ~= 0 then
                    if splice then
                        if findItem(seed) == 0 or findItem(seedsplice) == 0 then
                            identity.takingseed(threads)
                            setJob("Planting")
                            identity.warp(threads,doorfarmList)
                            identity.webhookinfo()
                        end
                    else
                        if findItem(seed) == 0 then
                            identity.takingseed(threads)
                            setJob("Planting")
                            identity.warp(threads,doorfarmList)
                            identity.webhookinfo()
                        end
                    end
                    findPath(x,y)
                    sleep(delayplant)
                    identity.reconnect(threads,doorfarmList,x,y)
                    if splice then
                        while getTile(x,y).fg ~= seed do
                            place(seed,0,0)
                            sleep(delayplant)
                            identity.reconnect(threads,doorfarmList,x,y)
                        end
                        while getTile(x,y).fg == seed do
                            place(seedsplice,0,0)
                            sleep(delayplant)
                            identity.reconnect(threads,doorfarmList,x,y)
                        end
                    else
                        if getTile(x,y).fg ~= seed then
                            place(seed,0,0)
                            sleep(delayplant)
                            identity.reconnect(threads,doorfarmList,x,y)
                        end
                    end
                end
            end
            if tileD == 1 then
                if tileA == 0 then
                    tileA = 99
                    tileB = 0
                    tileC = -1
                    tileD = 0
                elseif tileA == 99 then
                    tileA = 0
                    tileB = 99
                    tileC = 1
                    tileD = 0
                end
            elseif tileD == 0 then
                tileD = tileD + 1
            end
        end
    elseif typescript == "rotation" or typescript == "sellgems" then
        for y = -1, 53 do
            for x = tileA, tileB, tileC do
                if getTile(x, y).fg == 0 and getTile(x, y + 1).flags ~= 0 and findItem(seed) ~= 0 then
                    findPath(x,y)
                    sleep(delayplant)
                    identity.reconnect(threads,doorfarmList,x,y)
                    if getTile(x,y).fg ~= seed then
                        place(seed,0,0)
                        sleep(delayplant)
                        identity.reconnect(threads,doorfarmList,x,y)
                    end
                end
            end
            if tileD == 1 then
                if tileA == 0 then
                    tileA = 99
                    tileB = 0
                    tileC = -1
                    tileD = 0
                elseif tileA == 99 then
                    tileA = 0
                    tileB = 99
                    tileC = 1
                    tileD = 0
                end
            elseif tileD == 0 then
                tileD = tileD + 1
            end
        end
        if findItem(seed) >= amountseed then
            identity.storingseeds(threads)
            setJob("Harvesting")
            identity.warp(threads,doorfarmList)
            identity.webhookinfo()
        end
    end
end

identity.collectobj = function(threads)
    if typescript == "collect" then
        for _, obj in pairs(getObjects()) do
            if obj.id == block then
                if identity.itemFloat(block) ~= 0 then
                    findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                    sleep(delaycollect)
                    if ignoregems then
                        collect(range,112)
                    else
                        collect(range)
                    end
                    sleep(delaycollect)
                    identity.reconnect(threads,doorfarmList,math.floor(obj.x / 32),math.floor(obj.y / 32))
                end
                if findItem(block) > 180 then
                    if recycle then
                        identity.recycles(threads)
                        setJob("Harvesting")
                    else
                        identity.storingblocks(threads)
                        setJob("Collecting")
                        identity.warp(threads,doorfarmList)
                        identity.webhookinfo()
                    end
                end
                if findItem(itemevent[1]) > amount then
                    identity.storingevents(threads)
                    setJob("Collecting")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                elseif findItem(seed) > 180 then
                    identity.storingseeds(threads)
                    setJob("Collecting")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                elseif findItem(112) > mingems and buypack then
                    identity.buying(threads)
                    identity.storingpacks(threads)
                    setJob("Collecting")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                end
            end
        end
    elseif typescript == "gems" then
        for _, obj in pairs(getObjects()) do
            if obj.id == 112 then
                if identity.itemFloat(obj.id) ~= 0 then
                    findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                    sleep(delaycollect)
                    if ignoregems then
                        collect(range,112)
                    else
                        collect(range)
                    end
                    sleep(delaycollect)
                    identity.reconnect(threads,doorfarmList,math.floor(obj.x / 32),math.floor(obj.y / 32))
                end
                if findItem(112) > mingems and buypack  then
                    identity.buying(threads)
                    identity.storingpacks(threads)
                    setJob("Collecting")
                    identity.warp(threads,doorfarmList)
                    identity.webhookinfo()
                end
            end
        end
    end
end

identity.placeall = function()
    while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32) - 1).fg ~= 226 do
        place(226,0,-1)
        sleep(delayplace)
        identity.reconnect(find,"")
    end
    sleep(1000)
    if getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32) - 1).fg == 226 then
        punch(0,-1)
        sleep(delayplace)
        identity.reconnect(find,"")
    end
    if findItem(226) > 0 and getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32) - 1).fg == 226 then
        identity.storingjammer()
    end
end

identity.hook = function(varlist)
	if varlist[0] == "OnDialogRequest" and varlist[1]:find("add_label_with_icon|big|`wUnstable Tesseract``|left|6948|") then
		if varlist[1]:find("The machine is currently empty!") then 
            sleep(1000)
		else
			amount = varlist[1]:match("The machine contains (%d+)")
			amounts = 1
			if tonumber(amount) >= 200 then 
				amounts = 200 
			end
			if tonumber(amount) < 200 then 
				amounts = tonumber(amount) 
			end
            local utpkt = string.format([[action|dialog_return
            dialog_name|itemsucker_block
            tilex|%d|
            tiley|%d|
            buttonClicked|retrieveitem
            chk_enablesucking|1
            ]], varlist[1]:match("tilex|(%d+)"), varlist[1]:match("tiley|(%d+)"))
            sleep(1000)
            sendPacket(utpkt,2)
            sleep(1000)
            local utpkt = string.format([[action|dialog_return
            dialog_name|itemremovedfromsucker
            tilex|%d|
            tiley|%d|
            itemtoremove|%d]], varlist[1]:match("tilex|(%d+)") , varlist[1]:match("tiley|(%d+)") , amounts)
            sleep(1000)
            sendPacket(utpkt,2)
            sleep(1000)
        end
    end
	if varlist[0] == "OnDialogRequest" and varlist[1]:find("add_label_with_icon|big|`wGaia's Beacon``|left|6946|") then
		if varlist[1]:find("The machine is currently empty!") then 
            sleep(1000)
		else
			ammount = varlist[1]:match("The machine contains (%d+)")
			ammounts = 1
			if tonumber(ammount) >= 200 then 
				ammounts = 200 
			end
			if tonumber(ammount) < 200 then 
				ammounts = tonumber(ammount) 
			end
            local gaiapkt = string.format([[action|dialog_return
            dialog_name|itemsucker_seed
            tilex|%d|
            tiley|%d|
            buttonClicked|retrieveitem
            chk_enablesucking|1
            ]], varlist[1]:match("tilex|(%d+)") , varlist[1]:match("tiley|(%d+)"))
            sleep(1000)
            sendPacket(gaiapkt,2)
            sleep(1000)
            local gaiapkt = string.format([[action|dialog_return
            dialog_name|itemremovedfromsucker
            tilex|%d|
            tiley|%d|
            itemtoremove|%d]], varlist[1]:match("tilex|(%d+)") , varlist[1]:match("tiley|(%d+)") , ammounts)
            sleep(1000)
            sendPacket(gaiapkt,2)
            sleep(1000)
        end
	end
end

addHook("onvariant","retrieve",identity.hook)

identity.setposition = function()
    ::Here::
    world = identity.splitt(worldpnb[index],"[^:]+")[1]
    door = identity.splitt(worldpnb[index],"[^:]+")[2]
    setJob("Retrieve")
    identity.warp(world,door)
    if not people then
        if not level then
            if not subserver then
                if not nuked then
                    if not wrong then
                        if string.upper(getBot().name) == string.upper(retrieveut) then
                            for i , tile in pairs(getTiles()) do
                                if tile.fg == 6948 then
                                    findPath(tile.x,tile.y-1)
                                    sleep(1000)
                                    identity.utx = math.floor(getBot().x / 32)
                                    identity.uty = math.floor(getBot().y / 32)
                                    sleep(1000)
                                end
                            end
                        elseif string.upper(getBot().name) == string.upper(retrievegaia) then
                            for i, tile in pairs(getTiles()) do
                                if tile.fg == 6946 then
                                    findPath(tile.x,tile.y-1)
                                    sleep(1000)
                                    identity.gaiax = math.floor(getBot().x / 32)
                                    identity.gaiay = math.floor(getBot().y / 32)
                                    sleep(1000)
                                end
                            end
                        end
                    else
                        wrong = false
                        sleep(5000)
                        identity.botinfo("World pnb : [ ||"..world.."|| ] is Wrong door, terminated script @everyone")
                        print("World pnb : [ "..world.." ] is Wrong door, terminated script")
                        error()
                    end
                else
                    nuked = false
                    sleep(5000)
                    identity.botinfo("World pnb : [ ||"..world.."|| ] is NUKED @everyone")
                    print("World pnb : [ "..world.." ] is NUKED, terminated script")
                    error()
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto Here
            end
        else
            level = false
            sleep(5000)
            print("World : "..getBot().world.." has level limit, change ur level world limit")
            identity.botinfo("World : "..getBot().world.." has level limit, change ur level world limit !, terminated script @everyone")
            error()
        end
    else
        people = false
        sleep(5000)
        print("World : "..getBot().world.." has full people, sleeping for 2 minutes")
        identity.botinfo("World : "..getBot().world.." has full people, sleeping for 2 minutes")
        sleep(120000)
        goto Here
    end
end

identity.storingretrieve = function()
    world = identity.splitt(worldpnb[index],"[^:]+")[1]
    door = identity.splitt(worldpnb[index],"[^:]+")[2]
    if string.upper(getBot().name) == string.upper(retrievegaia) then
        for i, tile in pairs(getTiles()) do
            if tile.fg == 6946 then
                findPath(tile.x,tile.y - 1)
                sleep(1000)
                identity.reconnect(world,door,tile.x,tile.y - 1)
            end
            while findItem(seed) > 0 do
                drop(seed)
                sleep(delaydrop)
                move(1,0)
                sleep(500)
                identity.reconnect(world,door,tile.x,tile.y - 1)
            end
        end
    elseif string.upper(getBot().name) == string.upper(retrieveut) then
        for i, tile in pairs(getTiles()) do
            if tile.fg == 6948 then
                findPath(tile.x,tile.y - 1)
                sleep(1000)
                identity.reconnect(world,door,tile.x,tile.y - 1)
            end
            while findItem(block) > 0 do
                drop(block)
                sleep(delaydrop)
                move(1,0)
                sleep(500)
                identity.reconnect(world,door,tile.x,tile.y - 1)
            end
        end
    end
end

identity.algorithm = function(threads)
    for _, value in ipairs(farmList) do
        ::BACK::
        identity.warp(value,doorfarmList)
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            setJob("Prepare grinder")
                            for _, tile in pairs(getTiles()) do
                                if tile.fg == 0 and getTile(tile.x, tile.y + 1).flags ~= 0 and findItem(seed) > 0 then
                                    findPath(tile.x,tile.y)
                                    sleep(25)
                                    if getTile(tile.x,tile.y).fg ~= seed then
                                        place(seed,0,0)
                                        sleep(delayplant)
                                        identity.reconnect(value,doorfarmList,tile.x,tile.y)
                                    end
                                end
                            end
                            for _, tile in pairs(getTiles()) do
                                if tile.fg == seed and tile.ready then
                                    findPath(tile.x,tile.y)
                                    sleep(25)
                                    identity.reconnect(value,doorfarmList,tile.x,tile.y)
                                    if tile.fg == seed then
                                        punch(0,0)
                                        sleep(delayharvest)
                                        identity.reconnect(value,doorfarmList,tile.x,tile.y)
                                    end
                                    collect(range)
                                    sleep(delaycollect)
                                    if findItem(block) > 180 then
                                        if autogrinder then
                                            identity.grinder(threads)
                                            goto BACK
                                        else
                                            identity.storingblocks(threads)
                                            goto BACK
                                        end
                                    end
                                end
                            end
                        else
                            wrong = false
                            sleep(5000)
                            identity.writeFile("worldinfo","[ "..value.." ] is wrong id")
                            sleep(1000)
                            print(""..value.." is wrong door id, skipped world")
                            identity.botinfo("[ ||"..value.."|| ] is wrong door id, skipped world @everyone")
                        end
                    else
                        nuked = false
                        sleep(5000)
                        identity.writeFile("worldinfo","[ "..value.." ] is NUKED !!")
                        sleep(1000)
                        print(""..value.." is NUKED!, check ur world !!")
                        identity.botinfo("[ ||"..value.."|| ] is NUKED!, check ur world !! @everyone")
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto BACK
                end
            else
                level = false
                sleep(5000)
                print("World : "..value.." has level limit, change ur level world limit")
                identity.botinfo("World : "..value.." has level limit, change ur level world limit ! @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..value.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..value.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto BACK
        end
    end
end

identity.fact = function(threads)
    ::BACK::
    setJob("Factory")
    for _, tile in pairs(getTiles()) do
        if tile.fg == 0 and getTile(tile.x, tile.y + 1).flags ~= 0 then
            findPath(tile.x,tile.y)
            sleep(25)
            if getTile(tile.x,tile.y).fg ~= seed then
                place(seed,0,0)
                sleep(delayplant)
                identity.reconnect(find,"",tile.x,tile.y)
            end
        end
        if findItem(seed) == 0 then
            break
        end
    end
    if findItem(seed) >= amountpabrikseed then
        if autogrinder then
            identity.algorithm(threads)
            setJob("Factory")
            identity.warp(find,"")
            goto BACK
        else
            identity.storingseeds(threads)
            setJob("Factory")
            identity.warp(find,"")
            goto BACK
        end
    end
    ::check::
    if findItem(block) < 180 then
        identity.facts(threads,find,"")
        say("/dance")
        sleep(10000)
        goto check
    else
        identity.rotate(threads)
        goto BACK
    end
end

identity.facts = function(threads,name,id)
    ::HERE::
    for _, tile in pairs(getTiles()) do
        if tile.fg == seed and tile.ready then
            findPath(tile.x,tile.y)
            sleep(25)
            identity.reconnect(name,id,tile.x,tile.y)
            if tile.fg == seed then
                punch(0,0)
                sleep(delayharvest)
                identity.reconnect(name,id,tile.x,tile.y)
            end
            collect(range)
            sleep(delaycollect)
            if findItem(block) > 180 then
                identity.fact(threads)
            elseif findItem(112) > mingems and buypack then
                identity.buying(threads)
                identity.storingpacks(threads)
                setJob("Harvesting")
                identity.warp(name,id)
                identity.webhookinfo()
            end
        end
    end
end

identity.grinder = function(threads)
    ::HERE::
    setJob("Grinding")
    identity.warp(worldtogrind,iddoorworldtogrind)
    if not people then
        if not level then
            if not subserver then
                if not nuked then
                    if not wrong then
                        for _, tile in pairs(getTiles()) do
                            if tile.fg == 4582 then
                                findPath(tile.x,tile.y - 1)
                                sleep(100)
                                identity.reconnect(worldtogrind,iddoorworldtogrind,tile.x,tile.y - 1)
                            end
                        end
                        place(block,0,1)
                        sleep(2000)
                        sendPacket("action|dialog_return\ndialog_name|grinder\ntilex|"..(math.floor(getBot().x/32)).."|\ntiley|"..(math.floor(getBot().y/32)+1).."|\nitemID|"..block.."|\ncount|"..math.floor(findItem(block)/itemamountpergrind).."",2)
                        sleep(2000)
                        for i,tile in pairs(getTiles()) do
                            if tile.fg == 0 or tile.bg == 0 then
                                ::BACK::
                                findPath(grindX + (tileFactory),grindY)
                                sleep(1000)
                                local count = 0
                                identity.reconnect(worldtogrind,iddoorworldtogrind,grindX + (tileFactory),grindY)
                                if grindX + (tileFactory) >= 98 then
                                    grindY = grindY - 1
                                    tileFactory = 0
                                end
                                while findItem(itemidaftergrind) > 0 do
                                    drop(itemidaftergrind)
                                    sleep(delaydrop)
                                    identity.reconnect(worldtogrind,iddoorworldtogrind,grindX + (tileFactory),grindY)
                                    count = count + 1
                                    if count >= 2 then
                                        tileFactory = tileFactory + 1
                                        goto BACK
                                    end
                                end
                            end
                            if findItem(itemidaftergrind) == 0 then
                                break
                            end
                        end
                    else
                        wrong = false
                        sleep(5000)
                        print("Id door world take support items is wrong, check ur id door !!")
                        identity.botinfo("Id door world take support items is wrong, check ur id door !, terminated script @everyone")
                        error()
                    end
                else
                    nuked = false
                    sleep(5000)
                    print("World take support items is nuked, check ur world !!")
                    identity.botinfo("World take support items is nuked, check ur world !, terminated script @everyone")
                    error()
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto HERE
            end
        else
            level = false
            sleep(5000)
            print("World to grinder has level limit, change ur level world limit")
            identity.botinfo("World to grinder has level limit, change ur level world limit !, terminated script @everyone")
            error()
        end
    else
        people = false
        sleep(5000)
        print("World to grinder has full people, sleeping for 2 minutes")
        identity.botinfo("World to grinder has full people, sleeping for 2 minutes")
        sleep(120000)
        goto HERE
    end
    infoid[world] = "["..identity.itemFloat(itemidaftergrind).."]"
end

identity.takebackfact = function(threads)
    ::BACK::
    for i = 1, 2 do
        for _, tile in pairs(getTiles()) do
            if tile.fg == seed and tile.ready then
                findPath(tile.x,tile.y)
                sleep(25)
                identity.reconnect(value,doorfarmList,tile.x,tile.y)
                if tile.fg == seed then
                    punch(0,0)
                    sleep(delayharvest)
                    identity.reconnect(value,doorfarmList,tile.x,tile.y)
                end
                collect(range)
                sleep(delaycollect)
                if findItem(block) > 180 then
                    identity.rotate(threads)
                    goto BACK
                elseif findItem(seed) >= amountpabrikseed then
                    identity.storingseeds(threads)
                    setJob("Take back factory")
                    identity.warp(threads,"")
                end
            end
        end
    end
    for _, tile in pairs(getTiles()) do
        if tile.fg == 226 then
            findPath(tile.x,tile.y - 1)
            sleep(100)
            identity.reconnect(find,"",tile.x,tile.y - 1)
        end
    end
    while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32) + 1).fg == 226 do
        punch(0,1)
        sleep(delaypunch)
    end
end

if BizzantiuM.version == "1.1" and BizzantiuM.handler == "akbarsht" then
    if findItem(9640) > 0 then
        ::SUCK::
        identity.warp(getBot().name,"")
        while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32) - 1).fg ~= 9640 do
            place(9640,0,-1)
            sleep(delayplace)
        end
        if findItem(9640) > 0 then
            goto SUCK
        end
    end
    ::Check::
    if findItem(98) == 0 and takepickaxe and getBot().status == "online" then
        identity.takepickaxe(threads)
        goto Check
    end
    if takebackjammer then
        identity.breakjammers()
        identity.storingjammer()
        error()
    end
    if takebackfactory then
        for _, list in ipairs(factorys) do
            ::BACK::
            setJob("Take back factory")
            identity.warp(list,"")
            identity.webhookinfo()
            if not people then
                if not level then
                    if not subserver then
                        if not nuked then
                            identity.takebackfact(list)
                        else
                            nuked = false
                            sleep(5000)
                            identity.writeFile("worldinfo","[ "..list.." ] is NUKED !!")
                            sleep(1000)
                            print(""..list.." is NUKED!, check ur world !!")
                            identity.botinfo("[ ||"..list.."|| ] is NUKED!, check ur world !! @everyone")
                        end
                    else
                        subserver = false
                        sleep(5000)
                        print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                        identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                        sleep(120000)
                        goto BACK
                    end
                else
                    level = false
                    sleep(5000)
                    print("World : "..list.." has level limit, change ur level world limit")
                    identity.botinfo("World : "..list.." has level limit, change ur level world limit ! @everyone")
                    error()
                end
            else
                people = false
                sleep(5000)
                print("World : "..list.." has full people, sleeping for 2 minutes")
                identity.botinfo("World : "..list.." has full people, sleeping for 2 minutes")
                sleep(120000)
                goto BACK
            end
        end
        if findItem(226) > 0 then
            identity.storingjammer()
        end
        setJob("Finished take back")
        error()
    end
    if pnbotherworld then
        ::HERE::
        if findItem(226) == 0 then
            identity.takejammer(threads)
            goto HERE
        else
            setJob("Generating worlds")
            identity.botinfo("Bot : "..getBot().name.." is generating a new world")
            identity.warp(find,"")
            move(1,0)
            sleep(500)
            identity.reconnect(find,"")
            if not people then
                if not level then
                    if not subserver then
                        if not nuked then
                            identity.placeall()
                            identity.botinfo("Bot : "..getBot().name.." success generating a new world, the world name is : "..find.."")
                            identity.writeFile("jammer",'"'..find..'",')
                            if findItem(226) > 0 then
                                goto HERE
                            end
                        else
                            nuked = false
                            sleep(5000)
                            print("World generate is NUKED!, check ur world !!")
                            identity.botinfo("World generate is NUKED!, check ur world !! @everyone")
                            goto HERE
                        end
                    else
                        subserver = false
                        sleep(5000)
                        print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                        identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                        sleep(120000)
                        goto HERE
                    end
                else
                    level = false
                    sleep(5000)
                    print("World generate has level limit, Trying to generate world again")
                    identity.botinfo("World generate has level limit, Trying to generate world again! @everyone")
                    goto HERE
                end
            else
                people = false
                sleep(5000)
                print("World generate has full people, sleeping for 2 minutes")
                identity.botinfo("World generate has full people, sleeping for 2 minutes")
                sleep(120000)
                goto HERE
            end
        end
    end
    if string.upper(getBot().name) == string.upper(retrieveut) or string.upper(getBot().name) == string.upper(retrievegaia) then
        identity.setposition()
        while true do
            if string.upper(getBot().name) == string.upper(retrieveut) then
                findPath(identity.utx,identity.uty)
                sleep(delayretrieve)
                wrench(0,1)
                sleep(delayretrieve*2)
                identity.storingretrieve()
                identity.reconnect(world,door,identity.utx,identity.uty)
            elseif string.upper(getBot().name) == string.upper(retrievegaia) then
                findPath(identity.gaiax,identity.gaiay)
                sleep(delayretrieve)
                wrench(0,1)
                sleep(delayretrieve*2)
                identity.storingretrieve()
                identity.reconnect(world,door,identity.gaiax,identity.gaiay)
            end
        end
    end
    if typescript == "pnb" then
        if findItem(block) >= pnbtile then
            identity.line(threads)
        else
            identity.take(threads)
        end
    elseif typescript == "pabrik" then
        ::INC::
        if findItem(seed) < 100 then
            identity.takingseed(threads)
            goto INC
        end
        ::HERE::
        if findItem(226) == 0 then
            identity.takejammer(threads)
            goto HERE
        else
            setJob("Generating worlds")
            identity.botinfo("Bot : "..getBot().name.." is generating a new world")
            identity.warp(find,"")
            move(1,0)
            sleep(500)
            identity.reconnect(find,"")
            if not people then
                if not level then
                    if not subserver then
                        if not nuked then
                            identity.placeall()
                            identity.botinfo("Bot : "..getBot().name.." success generating a new world, the world name is : "..find.."")
                            identity.writeFile("jammer",'"'..find..'",')
                            if findItem(226) > 0 then
                                goto HERE
                            end
                        else
                            nuked = false
                            sleep(5000)
                            print("World generate is NUKED!, check ur world !!")
                            identity.botinfo("World generate is NUKED!, check ur world !! @everyone")
                            goto HERE
                        end
                    else
                        subserver = false
                        sleep(5000)
                        print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                        identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                        sleep(120000)
                        goto HERE
                    end
                else
                    level = false
                    sleep(5000)
                    print("World generate has level limit, Trying to generate world again")
                    identity.botinfo("World generate has level limit, Trying to generate world again! @everyone")
                    goto HERE
                end
            else
                people = false
                sleep(5000)
                print("World generate has full people, sleeping for 2 minutes")
                identity.botinfo("World generate has full people, sleeping for 2 minutes")
                sleep(120000)
                goto HERE
            end
        end
        identity.fact(threads)
    end
    while true do
        for _, value in ipairs(worlds) do
            ::BACK::
            identity.warp(value,doorfarmList)
            identity.webhookinfo()
            if not people then
                if not level then
                    if not subserver then
                        if not nuked then
                            if not wrong then
                                if typescript == "ht" or typescript == "rotation" or typescript == "sellgems" then
                                    identity.harvest(value)
                                    identity.rechecking(value)
                                elseif typescript == "collect" or typescript == "gems" then
                                    identity.collectobj(value)
                                elseif typescript == "pt" then
                                    identity.plant(value)
                                    identity.rechecking(value)
                                end
                            else
                                wrong = false
                                sleep(5000)
                                identity.writeFile("worldinfo","[ "..value.." ] is wrong id")
                                sleep(1000)
                                print(""..value.." is wrong door id, skipped world")
                                identity.botinfo("[ ||"..value.."|| ] is wrong door id, skipped world @everyone")
                            end
                        else
                            nuked = false
                            sleep(5000)
                            identity.writeFile("worldinfo","[ "..value.." ] is NUKED !!")
                            sleep(1000)
                            print(""..value.." is NUKED!, check ur world !!")
                            identity.botinfo("[ ||"..value.."|| ] is NUKED!, check ur world !! @everyone")
                        end
                    else
                        subserver = false
                        sleep(5000)
                        print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                        identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                        sleep(120000)
                        goto BACK
                    end
                else
                    level = false
                    sleep(5000)
                    print("World : "..value.." has level limit, change ur level world limit")
                    identity.botinfo("World : "..value.." has level limit, change ur level world limit ! @everyone")
                    error()
                end
            else
                people = false
                sleep(5000)
                print("World : "..value.." has full people, sleeping for 2 minutes")
                identity.botinfo("World : "..value.." has full people, sleeping for 2 minutes")
                sleep(120000)
                goto BACK
            end
        end
        if not looping then
            if findItem(block) > 0 then
                identity.storingblocks(threads)
            end
            if findItem(seed) > 0 then
                identity.storingseeds(threads)
            end
            setJob("Already finished all world")
            print("[ "..getBot().name.." ] Already finished all world, Terminated script!")
            identity.botinfo("[ ||"..getBot().name.."|| ] Already finished all world, Terminated script! @everyone")
            if pnbotherworld then
                identity.warp(find,"")
                move(1,0)
                sleep(500)
                while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32) - 1).fg == 226 do
                    punch(0,-1)
                    sleep(delayplace)
                    identity.reconnect(find,"")
                end
                identity.storingjammer()
            end
            setJob("Finished all world")
            identity.warp(find,"")  
            if removingbot then
                removeBot(getBot().name)
                sleep(1500)
            end 
            error()
        end
    end
else
    print("This script made by BizzantuM's server, buy at another server = RESELLER !!")
    error()
end
